---
import DefaultLayout from '../../layouts/DefaultLayout.astro'
import { getCollection } from 'astro:content'
import { DateTime } from 'luxon'
const baseUrl = import.meta.env.BASE_URL

const roomOrder = ["Ballroom D", "Ballroom C", "Ballroom B", "Ballroom A"]
const talks = (await getCollection("talks")).sort(
  (a, b) => Date.parse(a.data.start_time) - Date.parse(b.data.start_time) || roomOrder.indexOf(a.data.room) - roomOrder.indexOf(b.data.room)
);

// Separate scheduled and unscheduled talks
const unscheduledTalks = []
const scheduledTalks = []

talks.forEach(talk => {
  const dateTime = DateTime.fromISO(talk.data.start_time)
  if (dateTime.isValid) {
    scheduledTalks.push(talk)
  } else {
    unscheduledTalks.push(talk)
  }
})

const talkDataByDate = scheduledTalks.reduce((acc, talk) => {
  const date = DateTime.fromISO(talk.data.start_time).toISODate()
  if (!acc[date]) {
    acc[date] = []
  }
  acc[date].push(talk)
  return acc
}, {})

const talkDataByDateAndTime = Object.keys(talkDataByDate).reduce((acc, date) => {
  acc[date] = talkDataByDate[date].reduce((acc, talk) => {
    // Use ISO string as key to ensure consistent sorting
    const timeKey = talk.data.start_time
    if (!acc[timeKey]) {
      acc[timeKey] = []
    }
    acc[timeKey].push(talk)
    return acc
  }, {})
  return acc
}, {})

function formatTime(timeString) {
  const talkTime = DateTime.fromISO(timeString)
  if (isNaN(talkTime)) {
    return 'TBD'
  } else {
    return talkTime.setZone('America/New_York').toFormat('h:mm a').toLowerCase()
  }
}

// Utility function to handle canceled talk titles with strikethrough
function renderCanceledTitle(title) {
  const isCanceled = title.toLowerCase().startsWith('canceled:')
  if (isCanceled) {
    const titleWithoutPrefix = title.replace(/^canceled:\s*/i, '').trim()
    return `CANCELED: <span class="line-through">${titleWithoutPrefix}</span>`
  }
  return title
}
---

<DefaultLayout title="Schedule">
  <section class="my-6">
    <div class="container">
      <h1>Schedule</h1>
      <p><em><a href={`${baseUrl}/program/open-spaces/`}>Open Spaces</a> rooms are available during the Sat & Sun talks. All times EDT.</em></p>
    </div>
  </section>

{( Object.keys(talkDataByDateAndTime).map((scheduleDate) => (
  <section class="container pagebreak">
      <h2 class="my-6">{DateTime.fromISO(scheduleDate).toFormat('cccc, LLLL d')}</h2>
      <div class="">
      <table class="table-auto text-sm">
        <thead class="text-center">
          <th class="w-32 p-2 heading">Start Time</th>
          <th class="p-x2 heading" colspan="4">Room</th>
        </thead>
        <thead class="text-center">
          <th class="p-2 time-heading">{DateTime.fromISO(scheduleDate).toFormat('ccc')}</th>
          <th class="p-2 sticky-heading">Ballroom D</th>
          <th class="p-2 sticky-heading">Ballroom C</th>
          <th class="p-2 sticky-heading">Ballroom B</th>
          <th class="p-2 sticky-heading">Ballroom A</th>
        </thead>

      {Object.keys(talkDataByDateAndTime[scheduleDate]).sort().map((scheduleTime) => (
        <tr class="">
          <td class="text-center font-bold time"><p>{formatTime(scheduleTime)}</p></td>
            {talkDataByDateAndTime[scheduleDate][scheduleTime].sort((a, b) => roomOrder.indexOf(a.data.room) - roomOrder.indexOf(b.data.room)).map((talk) => (
              () => {
                if (["Keynote", "Plenary Session"].includes(talk.data.type)) {
                  if (talk.data.title === "Lightning Talks"){
                    return <td class="align-top p-2 plenary lightning-talks">
                      <p class="font-bold"><a href={`${baseUrl}/program/lightning-talks`}><span set:html={renderCanceledTitle(talk.data.title)}></span></a></p>
                      <p class="text-xs">Any attendee can sign up to give a lightning talk!</p>
                      </td><td class="break" colspan="3"></td>
                  } else if (talk.data.type === "Keynote") {
                    return <td class="align-top p-2 plenary talk">
                      <p class="font-bold">
                        <a href={`${baseUrl}/program/talks/${talk.data.slug}`}><span set:html={renderCanceledTitle(talk.data.title)}></span></a>
                      </p>
                      <p class="text-xs">by {talk.data.speakers.map((speaker) => speaker.name).join(', ')}</p>
                      </td><td class="break" colspan="3"></td> 
                  } else if (talk.data.slug === "friday-opening-reception") {
                    return <td class="align-top p-2 plenary">
                      <p class="font-bold"><a href={`${baseUrl}/program/opening-reception`}>{talk.data.title}</a></p>
                      <p class="text-xs" set:html={talk.data.description.replace(/\n/g, '<br>')}></p>
                      </td><td class="break" colspan="3"></td>
                  } else {
                    return <td class="font-bold p-2 plenary">
                      <p class="">{talk.data.title}</p>
                      </td><td class="break" colspan="3"></td>
                  }
                } else if (talk.data.type === "Break" || talk.data.type === "Lunch Break") {
                  if (talk.data.type === "Lunch Break"){
                    return <td class="align-top p-2 break lunch" colspan="4">
                    <p class="font-bold"><a href={`${baseUrl}/program/saturday-lunch-break`}>{talk.data.title}</a></p>
                    <p class="text-xs">Lunch is on your own. Check the link for local recommendations!</p>
                  </td>
                  } else {
                    return <td class=" p-2 break font-bold" colspan="4">
                    <p class="">{talk.data.title}</p>
                  </td>
                  }
                } else if (talk.data.type === "Open"){
                  return <td class="talk"></td>
                } else {
              return <td class="align-top p-2 talk">
                <p class="font-bold">
                  <a href={`${baseUrl}/program/talks/${talk.data.slug}`}><span set:html={renderCanceledTitle(talk.data.title)}></span></a>
                </p>
                <p class="text-xs">by {talk.data.speakers.map((speaker) => speaker.name).join(', ')}</p>
              </td>
                }
            }
          ))}
        </tr>
      ))}
      </table></div>
  </section>
)))}

{unscheduledTalks.length > 0 && (
  <section class="container">
    <h2 class="my-6">Not Scheduled</h2>
    <div class="space-content">
      <p>Check back here for schedule updates:</p>
      <ul>
        {unscheduledTalks.filter(talk => !['Break', 'Open'].includes(talk.data.type)).map(talk => (
          <li>
            <strong><a href={`${baseUrl}/program/talks/${talk.data.slug}`}><span set:html={renderCanceledTitle(talk.data.title)}></span></a></strong>
            {talk.data.speakers.length > 0 && (
              <span> by {talk.data.speakers.map((speaker) => speaker.name).join(', ')}</span>
            )}
          </li>
        ))}
      </ul>
    </div>
  </section>
)}



<style lang="scss" is:global>
  @use '../../assets/scss/base/color' as *;

  :root {
    --table-border: var(--neutral-400);
    --table-heading: var(--neutral-300);
    --table-background: var(--neutral-100);
    --table-muted: var(--neutral-200);
  }

  .darkmode {
    --table-border: var(--neutral-600);
    --table-heading: var(--neutral-800);
    --table-background: var(--neutral-900);
    --table-muted: var(--neutral-700);
  }

  table {
    border-top: 1px solid var(--table-border);
    border-left: 1px solid var(--table-border);
    border-collapse: separate;
    border-spacing: 0;
  }
  .sticky-heading {
    position: sticky;
    top: 0;
    background-color:  var(--table-heading);
    z-index: 3;
    border-right: 1px solid var(--table-border);
    border-top: 1px solid var(--table-border);
    border-bottom: 1px solid var(--table-border);
   }
   .time-heading {
    position: sticky;
    top: 0;
    left: 0;
    background-color:  var(--table-heading);
    z-index: 4;
    border-right: 1px solid var(--table-border);
    border-top: 1px solid var(--table-border);
    border-bottom: 1px solid var(--table-border);
   }
  .heading {
    background-color: var(--table-heading);
    border-right: 1px solid var(--table-border);
  }
  .time {
    background-color: var(--table-heading);
    position: sticky;
    border-right: 1px solid var(--table-border);
    left: 0;
    z-index: 2;
    &:not(:last-child) {
      border-bottom: 1px solid var(--table-border);
    }
  }
  .talk {
    min-width: 12em;
    height: 9em;
    background-color: var(--table-background);
    border-bottom: 1px solid var(--table-border);
    border-right: 1px solid var(--table-border);
    text-align: left;
  }
  .plenary {
    min-width: 12em;
    background-color: var(--table-background) ;
    border-bottom: 1px solid var(--table-border);
    border-right: 1px solid var(--table-border);
    text-align: left;
  }
  .lightning-talks {
    height: 12em;
  }
  .break {
    background-color: var(--table-muted);
    text-align: left;
  }
  .lunch {
    height: 12em;
  }

</style>