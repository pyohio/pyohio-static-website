---
import { Icon } from 'astro-icon/components'

const { icon = 'mdi:rocket', title = 'Title', href } = Astro.props
const isExternal = href && (href.startsWith('http://') || href.startsWith('https://'))
const baseUrl = import.meta.env.BASE_URL

const Tag = href ? 'a' : 'div'
const props = href
  ? {
      href: isExternal ? href : `${baseUrl}${href}`,
      ...(isExternal && { target: '_blank', rel: 'noopener noreferrer' }),
    }
  : {}
---

<Tag class="feature flex flex-col gap-3" {...props}>
  <Icon name={icon} />
  <div class="content">
    <h3>{title}</h3>
    <p>
      <slot>Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic, corporis.</slot>
    </p>
  </div>
</Tag>

<style lang="scss">
  @use '../assets/scss/base/breakpoint' as *;

  .feature {
    display: flex;
    position: relative;
    transition: transform 0.2s ease;
    padding: 1.5rem;
    width: calc(100% - 0.5rem);
    color: inherit !important;
    text-decoration: none !important;

    &:hover {
      transform: translateY(-4px);
      color: inherit !important;
      text-decoration: none !important;
    }

    > * {
      position: relative;
      z-index: 2;
    }

    @include breakpoint(large) {
      width: 100%;
    }

    &::before,
    &::after {
      position: absolute;
      content: '';
    }

    &::before {
      z-index: 1;
      inset: 0;
      box-shadow: 0 0 0 6px var(--neutral-100);
      border: 3px solid var(--neutral-700);
      border-radius: 1rem;
      background-color: var(--neutral-100);
    }

    &::after {
      z-index: 0;
      inset: 1rem -0.85rem -0.85rem 1rem;
      border-radius: 1rem;
      background-color: var(--action-color);
    }
  }

  :global(.feature [data-icon]) {
    width: 3rem;
    height: auto;
    color: var(--action-color);
  }

  :global(.feature h3) {
    margin-bottom: 0.5rem;
    font-size: 1.25rem;
    line-height: 1.2;
  }

  :global(.feature p) {
    font-size: 0.875rem;
    line-height: 1.4;
  }

  :global(.darkmode .feature::before) {
    box-shadow: 0 0 0 6px var(--dark-100);
    background-color: var(--dark-100);
  }

  :global(.feature h3) {
    color: inherit !important;
  }

  :global(.feature p) {
    color: inherit !important;
  }

  :global(a.feature:hover h3),
  :global(a.feature:hover p) {
    color: inherit !important;
  }
</style>
