code: XELQP3
description: "md//Many software developers have written a Python program without explicitly\r\
  \ndeclaring the types of the parameters for a function's parameters or return\r\n\
  values. Since the Python programming language now supports type annotations,\r\n\
  many people in the community are exploring this way to describe the data that a\r\
  \nfunction accepts as input and produces as output. When you start to apply\r\n\
  Python's type annotations, their syntax and meaning can be confusing and it is\r\
  \ncommon to wonder whether or not there is any benefit to adding them at all!\r\n\
  \r\nThis presentation will introduce Python's type annotations by iteratively\r\n\
  applying them to a function that does not have explicit types. After explaining\r\
  \nhow to use the types available in the `typing` package, this talk will\r\nillustrate\
  \ the ways in which a static type checker like `mypy` can find bugs in\r\na Python\
  \ program before it is executed. People who watch this talk will gain the\r\nknowledge\
  \ they need to start writing their first type annotations, use them to\r\nimprove\
  \ their Python programs, and ultimately find them to be beneficial."
slug: type-annotations-in-python-terribly-intimidating-or-tremendously-informative
speakers:
- avatar: https://pretalx.com/media/avatars/gregory-kapfhammer-biography-small_VGSaa80.jpg
  code: WUSBZJ
  name: Gregory M. Kapfhammer
  slug: gregory-m-kapfhammer
title: 'Type Annotations in Python: Terribly Intimidating or Tremendously Informative?'
type: Thunder Talk
