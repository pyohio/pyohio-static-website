[
  {
    "code": "EDLLMH",
    "title": "What Django Deployment is Really About",
    "slug": "what-django-deployment-is-really-about",
    "description": "<p>People often spend so much time learning how to build apps in Django that when it comes time for deployment, it feels like a whole new world that they don’t understand. Deployment recipes might help them get their app online–but then again they might not, if the steps that worked yesterday don’t work today. Even if they do get online, they might not understand that deployment process anymore than they did before.</p>\n<p>Instead of offering another set of steps, I think we can help beginners to make sense of deployment by reducing the entire process to four major areas of concern and equipping them to think through each of these on its own terms:</p>\n<ul>\n<li>Static Files - why do I have to worry about these now? I thought {% static %} was handling it?</li>\n<li>Database - does my sqlite3 file not work in deployment? How do I use my cloud provider’s remote DB?</li>\n<li>WSGI Server - how do I run my app in production? Doesn’t manage.py runserver work? I’ve never heard of WSGI, what is it and why does it matter to my Django project?</li>\n<li>Web Server (Apache/nginx/PaaS) - What do I need to understand about web servers like Apache or nginx to get my project online? Do I even need to configure a web server if I go with PaaS?</li>\n</ul>\n<p>We’ll also consider:</p>\n<ul>\n<li>Django’s deployment checklist</li>\n<li>django-simple-deploy</li>\n</ul>",
    "start_time": "2024-07-27T11:00:00-04:00",
    "end_time": "2024-07-27T11:30:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "James Walters",
        "avatar": "https://pretalx.com/media/avatars/GXSENE_6SmU4Ni.jpg",
        "code": "GXSENE",
        "slug": "james-walters"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "What Django Deployment is Really About",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "People often spend so much time learning how to build apps in Django that when it comes time for deployment, it feels like a whole new world that they don’t understand. Deployment recipes might help them get their app online–but then again they might not, if the steps that worked yesterday don’t work today. Even if they do get online, they might not understand that deployment process anymore than they did before.\n\nInstead of offering another set of steps, I think we can help beginners to make sense of deployment by reducing the entire process to four major areas of concern and equipping them to think through each of these on its own terms:\n\n* Static Files \\- why do I have to worry about these now? I thought {% static %} was handling it?\n* Database \\- does my sqlite3 file not work in deployment? How do I use my cloud provider’s remote DB?\n* WSGI Server \\- how do I run my app in production? Doesn’t manage.py runserver work? I’ve never heard of WSGI, what is it and why does it matter to my Django project?\n* Web Server (Apache/nginx/PaaS) \\- What do I need to understand about web servers like Apache or nginx to get my project online? Do I even need to configure a web server if I go with PaaS?\n\nWe’ll also consider:\n\n* Django’s deployment checklist\n* django\\-simple\\-deploy\n",
    "talk_url": "https://www.pyohio.org/2024/talks/what-django-deployment-is-really-about",
    "speaker_names": "James Walters",
    "description_youtube": "30 Minute Talk by James Walters at PyOhio 2024:\nPeople often spend so much time learning how to build apps in Django that when it comes time for deployment, it feels like a whole new world that they don’t understand. Deployment recipes might help them get their app online–but then again they might not, if the steps that worked yesterday don’t work today. Even if they do get online, they might not understand that deployment process anymore than they did before.\n\nInstead of offering another set of steps, I think we can help beginners to make sense of deployment by reducing the entire process to four major areas of concern and equipping them to think through each of these on its own terms:\n\n* Static Files \\- why do I have to worry about these now? I thought {% static %} was handling it?\n* Database \\- does my sqlite3 file not work in deployment? How do I use my cloud provider’s remote DB?\n* WSGI Server \\- how do I run my app in production? Doesn’t manage.py runserver work? I’ve never heard of WSGI, what is it and why does it matter to my Django project?\n* Web Server (Apache/nginx/PaaS) \\- What do I need to understand about web servers like Apache or nginx to get my project online? Do I even need to configure a web server if I go with PaaS?\n\nWe’ll also consider:\n\n* Django’s deployment checklist\n* django\\-simple\\-deploy\nPyOhio talk listing: https://www.pyohio.org/2024/talks/what-django-deployment-is-really-about"
  },
  {
    "code": "C7YYRN",
    "title": "Boosting Python Numeric Computations with Dynamic C++ Integration",
    "slug": "boosting-python-numeric-computations-with-dynamic-c-integration",
    "description": "<p>Uncover the secrets to turbocharging your Python numeric computations by harnessing the dynamic performance of <code>C++</code>. This talk is aimed at the beginner-intermediate Python developer working in the ML/AI infra or performance optimization space.</p>\n<p>Have you ever wondered how the growing usage of the numeric computation stack, including libraries like numpy, scipy, and scikit-learn, along with deep learning libraries such as pytorch and tensorflow, are shaping the future of AI and Machine Learning? And what about the intriguing fact that these libraries are built on wrappers for the underlying C++ code? Have you considered the benefits this brings, or how the optimization of these libraries as per the host device - be it CPU, GPU, or Apple Silicon - enhances performance and efficiency?</p>\n<p>And finally, let's consider the practical applications and real-world examples of this integration between Python and C++. What are the challenges and solutions in bridging the gap between Python and C++ in the context of AI and Machine Learning.</p>\n<p>Observing the growing trends at my workplace over the past few years, I am sure this process is going to be standardised soon with more developers being involved in such integrations/optimizations.</p>\n<p>This talk aims to get the Python community excited for this growing trend by sharing:<br />\n1. reasoning<br />\n2. Integration framework/paths specifically for pybind</p>",
    "start_time": "2024-07-27T15:00:00-04:00",
    "end_time": "2024-07-27T15:30:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "Mandar Deshpande",
        "avatar": "https://pretalx.com/media/avatars/ES3U77_cBJBU6u.jpeg",
        "code": "ES3U77",
        "slug": "mandar-deshpande"
      }
    ],
    "type": "30 Minute Talk",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Uncover the secrets to turbocharging your Python numeric computations by harnessing the dynamic performance of `C++`. This talk is aimed at the beginner\\-intermediate Python developer working in the ML/AI infra or performance optimization space.\n\nHave you ever wondered how the growing usage of the numeric computation stack, including libraries like numpy, scipy, and scikit\\-learn, along with deep learning libraries such as pytorch and tensorflow, are shaping the future of AI and Machine Learning? And what about the intriguing fact that these libraries are built on wrappers for the underlying C\\+\\+ code? Have you considered the benefits this brings, or how the optimization of these libraries as per the host device \\- be it CPU, GPU, or Apple Silicon \\- enhances performance and efficiency?\n\nAnd finally, let's consider the practical applications and real\\-world examples of this integration between Python and C\\+\\+. What are the challenges and solutions in bridging the gap between Python and C\\+\\+ in the context of AI and Machine Learning.\n\nObserving the growing trends at my workplace over the past few years, I am sure this process is going to be standardised soon with more developers being involved in such integrations/optimizations.\n\nThis talk aims to get the Python community excited for this growing trend by sharing:  \n\n1\\. reasoning  \n\n2\\. Integration framework/paths specifically for pybind\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/boosting-python-numeric-computations-with-dynamic-c-integration",
    "speaker_names": "Mandar Deshpande",
    "description_youtube": "30 Minute Talk by Mandar Deshpande at PyOhio 2024:\nUncover the secrets to turbocharging your Python numeric computations by harnessing the dynamic performance of `C++`. This talk is aimed at the beginner\\-intermediate Python developer working in the ML/AI infra or performance optimization space.\n\nHave you ever wondered how the growing usage of the numeric computation stack, including libraries like numpy, scipy, and scikit\\-learn, along with deep learning libraries such as pytorch and tensorflow, are shaping the future of AI and Machine Learning? And what about the intriguing fact that these libraries are built on wrappers for the underlying C\\+\\+ code? Have you considered the benefits this brings, or how the optimization of these libraries as per the host device \\- be it CPU, GPU, or Apple Silicon \\- enhances performance and efficiency?\n\nAnd finally, let's consider the practical applications and real\\-world examples of this integration between Python and C\\+\\+. What are the challenges and solutions in bridging the gap between Python and C\\+\\+ in the context of AI and Machine Learning.\n\nObserving the growing trends at my workplace over the past few years, I am sure this process is going to be standardised soon with more developers being involved in such integrations/optimizations.\n\nThis talk aims to get the Python community excited for this growing trend by sharing:  \n\n1\\. reasoning  \n\n2\\. Integration framework/paths specifically for pybind\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/boosting-python-numeric-computations-with-dynamic-c-integration"
  },
  {
    "code": "HCM8XD",
    "title": "Is Python Your TYPE of Programming Language? How to Use Static Typing in Python with Type Hints, MyPy and Pydantic",
    "slug": "is-python-your-type-of-programming-language",
    "description": "<p>Python's dynamic typing system famously offers flexibility, but this can sometimes lead to runtime errors that are hard to detect or predict. In many cases, the programmer knows what type a variable \"should\" be, but in earlier language versions the only option to enforce this was by writing custom, run-time type checks. Since Python 3.5, the language has offered type hints, which are optional annotations that suggest (but do not require) that a variable has a particular type. Combined with static type checkers like MyPy and run-time data validation frameworks like Pydantic, type hints offer Python programmers a powerful system to implement static types in a highly standardized way.</p>\n<p>This presentation explores these new standards for static typing in Python through the lens of two powerful and versatile libraries: MyPy and Pydantic. These tools build upon Python’s type hints to help you improve your code reliability and effectiveness with minimal extra effort.</p>\n<p>At the end of this presentation you will be able to:</p>\n<ul>\n<li>Use type hints, MyPy, and Pydantic to define and enforce static data types in Python.</li>\n<li>Identify important use cases where static types provide greater code reliability and quality.</li>\n<li>Leverage these tools to increase the resilience of your code against bad data, and deliver more useful and actionable error messages sooner.</li>\n</ul>\n<p>MyPy is a type checker that leverages built-in type hints to identify possible type errors during a separate static analysis stage. By integrating a MyPy step into your development, testing, and deployment processes, you can catch type-related errors at the start of the development cycle. This reduces debugging time, improves code quality, and often heads off potential production failures long before they occur. We will discuss MyPy's key features, how to integrate it into existing projects, and how it works together with Python's built-in dynamic typing.</p>\n<p>Pydantic is a data validation library that leverages Python's type hints to check incoming data at run time. Pydantic's data models ensure that incoming data conforms to defined schemas. This feature is especially useful in data-intensive applications for guaranteeing data integrity and standardizing error reporting. Key application areas include ETL, streaming data, and RESTful APIs (in fact, the popular FastAPI framework leans heavily on Pydantic for data validation). We will learn about Pydantic's applications in data parsing, and in building data models that enhance code resilience and simplify error-checking and logging.</p>\n<p>Through reference to practical examples and best practices, this talk will demonstrate how you can use MyPy and Pydantic to leverage the static typing capabilities in the core Python language to create more correct, maintainable, and resilient Python applications.</p>",
    "start_time": "2024-07-27T11:45:00-04:00",
    "end_time": "2024-07-27T12:15:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Jack Bennett",
        "avatar": "https://pretalx.com/media/avatars/WDRWVW_XPV6aM1.jpg",
        "code": "WDRWVW",
        "slug": "jack-bennett"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Is Python Your TYPE of Programming Language",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Python's dynamic typing system famously offers flexibility, but this can sometimes lead to runtime errors that are hard to detect or predict. In many cases, the programmer knows what type a variable \"should\" be, but in earlier language versions the only option to enforce this was by writing custom, run\\-time type checks. Since Python 3\\.5, the language has offered type hints, which are optional annotations that suggest (but do not require) that a variable has a particular type. Combined with static type checkers like MyPy and run\\-time data validation frameworks like Pydantic, type hints offer Python programmers a powerful system to implement static types in a highly standardized way.\n\nThis presentation explores these new standards for static typing in Python through the lens of two powerful and versatile libraries: MyPy and Pydantic. These tools build upon Python’s type hints to help you improve your code reliability and effectiveness with minimal extra effort.\n\nAt the end of this presentation you will be able to:\n\n* Use type hints, MyPy, and Pydantic to define and enforce static data types in Python.\n* Identify important use cases where static types provide greater code reliability and quality.\n* Leverage these tools to increase the resilience of your code against bad data, and deliver more useful and actionable error messages sooner.\n\nMyPy is a type checker that leverages built\\-in type hints to identify possible type errors during a separate static analysis stage. By integrating a MyPy step into your development, testing, and deployment processes, you can catch type\\-related errors at the start of the development cycle. This reduces debugging time, improves code quality, and often heads off potential production failures long before they occur. We will discuss MyPy's key features, how to integrate it into existing projects, and how it works together with Python's built\\-in dynamic typing.\n\nPydantic is a data validation library that leverages Python's type hints to check incoming data at run time. Pydantic's data models ensure that incoming data conforms to defined schemas. This feature is especially useful in data\\-intensive applications for guaranteeing data integrity and standardizing error reporting. Key application areas include ETL, streaming data, and RESTful APIs (in fact, the popular FastAPI framework leans heavily on Pydantic for data validation). We will learn about Pydantic's applications in data parsing, and in building data models that enhance code resilience and simplify error\\-checking and logging.\n\nThrough reference to practical examples and best practices, this talk will demonstrate how you can use MyPy and Pydantic to leverage the static typing capabilities in the core Python language to create more correct, maintainable, and resilient Python applications.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/is-python-your-type-of-programming-language",
    "speaker_names": "Jack Bennett",
    "description_youtube": "30 Minute Talk by Jack Bennett at PyOhio 2024:\nPython's dynamic typing system famously offers flexibility, but this can sometimes lead to runtime errors that are hard to detect or predict. In many cases, the programmer knows what type a variable \"should\" be, but in earlier language versions the only option to enforce this was by writing custom, run\\-time type checks. Since Python 3\\.5, the language has offered type hints, which are optional annotations that suggest (but do not require) that a variable has a particular type. Combined with static type checkers like MyPy and run\\-time data validation frameworks like Pydantic, type hints offer Python programmers a powerful system to implement static types in a highly standardized way.\n\nThis presentation explores these new standards for static typing in Python through the lens of two powerful and versatile libraries: MyPy and Pydantic. These tools build upon Python’s type hints to help you improve your code reliability and effectiveness with minimal extra effort.\n\nAt the end of this presentation you will be able to:\n\n* Use type hints, MyPy, and Pydantic to define and enforce static data types in Python.\n* Identify important use cases where static types provide greater code reliability and quality.\n* Leverage these tools to increase the resilience of your code against bad data, and deliver more useful and actionable error messages sooner.\n\nMyPy is a type checker that leverages built\\-in type hints to identify possible type errors during a separate static analysis stage. By integrating a MyPy step into your development, testing, and deployment processes, you can catch type\\-related errors at the start of the development cycle. This reduces debugging time, improves code quality, and often heads off potential production failures long before they occur. We will discuss MyPy's key features, how to integrate it into existing projects, and how it works together with Python's built\\-in dynamic typing.\n\nPydantic is a data validation library that leverages Python's type hints to check incoming data at run time. Pydantic's data models ensure that incoming data conforms to defined schemas. This feature is especially useful in data\\-intensive applications for guaranteeing data integrity and standardizing error reporting. Key application areas include ETL, streaming data, and RESTful APIs (in fact, the popular FastAPI framework leans heavily on Pydantic for data validation). We will learn about Pydantic's applications in data parsing, and in building data models that enhance code resilience and simplify error\\-checking and logging.\n\nThrough reference to practical examples and best practices, this talk will demonstrate how you can use MyPy and Pydantic to leverage the static typing capabilities in the core Python language to create more correct, maintainable, and resilient Python applications.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/is-python-your-type-of-programming-language"
  },
  {
    "code": "WY9FAP",
    "title": "20 GOTO 10: How to Make Scrolling ASCII Art",
    "slug": "20-goto-10-how-to-make-scrolling-ascii-art",
    "description": "<p>Scroll art is a form of animated ASCII art that beginners can make. Using loops, print(), and random numbers, you'll learn how to make a surprisingly wide variety of digital art within the constraints of text strings. You'll also learn about the history of ASCII art, computer education, and where to find inspiration for your own digital art.</p>",
    "start_time": "2024-07-27T15:00:00-04:00",
    "end_time": "2024-07-27T15:30:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Al Sweigart",
        "avatar": "https://pretalx.com/media/avatars/HVAES8_qkATXdK.jpg",
        "code": "HVAES8",
        "slug": "al-sweigart"
      }
    ],
    "type": "30 Minute Talk",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Scroll art is a form of animated ASCII art that beginners can make. Using loops, print(), and random numbers, you'll learn how to make a surprisingly wide variety of digital art within the constraints of text strings. You'll also learn about the history of ASCII art, computer education, and where to find inspiration for your own digital art.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/20-goto-10-how-to-make-scrolling-ascii-art",
    "speaker_names": "Al Sweigart",
    "description_youtube": "30 Minute Talk by Al Sweigart at PyOhio 2024:\nScroll art is a form of animated ASCII art that beginners can make. Using loops, print(), and random numbers, you'll learn how to make a surprisingly wide variety of digital art within the constraints of text strings. You'll also learn about the history of ASCII art, computer education, and where to find inspiration for your own digital art.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/20-goto-10-how-to-make-scrolling-ascii-art"
  },
  {
    "code": "HJH7YH",
    "title": "Technical Empathy",
    "slug": "technical-empathy",
    "description": "<p>From software to sneakers to sofas, the best designs are executed from the point of view of the user, maintainer, or owner – NOT from the point of view of the designers themselves. The terms \"usuability\", \"intuitive\", and even \"innovation\" are (or should be) inextricably linked with the perspective of the recipient, not the creator.</p>\n<p>As IT practitioners, we solve for this by taking time up-front to nail down the desired feature; by creating small incremental changes rather than sweeping monolithic updates; by collecting metrics on usage and flow; and by maintaining a \"fail fast\" mentality where we can pivot quickly. But all that might miss a key point: do we understand how the intended beneficiary of brilliance thinks? Do we know not only what they want, but why they want it? Or how they want it?</p>\n<p>The ability to see things from this perspective is called \"technical empathy\". In this talk, I'll define what technical empathy is; describe how having technical empathy enhances our design choices, smooths the road to execution, and leads to better outcomes; and provide ideas on how developers and engineers can build technical empathy in themselves and foster it within teams.</p>",
    "start_time": "2024-07-28T14:45:00-04:00",
    "end_time": "2024-07-28T15:15:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Leon Adato",
        "avatar": "https://pretalx.com/media/avatars/UVE988_lt2NTQ2.png",
        "code": "UVE988",
        "slug": "leon-adato"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Technical Empathy",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "From software to sneakers to sofas, the best designs are executed from the point of view of the user, maintainer, or owner – NOT from the point of view of the designers themselves. The terms \"usuability\", \"intuitive\", and even \"innovation\" are (or should be) inextricably linked with the perspective of the recipient, not the creator.\n\nAs IT practitioners, we solve for this by taking time up\\-front to nail down the desired feature; by creating small incremental changes rather than sweeping monolithic updates; by collecting metrics on usage and flow; and by maintaining a \"fail fast\" mentality where we can pivot quickly. But all that might miss a key point: do we understand how the intended beneficiary of brilliance thinks? Do we know not only what they want, but why they want it? Or how they want it?\n\nThe ability to see things from this perspective is called \"technical empathy\". In this talk, I'll define what technical empathy is; describe how having technical empathy enhances our design choices, smooths the road to execution, and leads to better outcomes; and provide ideas on how developers and engineers can build technical empathy in themselves and foster it within teams.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/technical-empathy",
    "speaker_names": "Leon Adato",
    "description_youtube": "30 Minute Talk by Leon Adato at PyOhio 2024:\nFrom software to sneakers to sofas, the best designs are executed from the point of view of the user, maintainer, or owner – NOT from the point of view of the designers themselves. The terms \"usuability\", \"intuitive\", and even \"innovation\" are (or should be) inextricably linked with the perspective of the recipient, not the creator.\n\nAs IT practitioners, we solve for this by taking time up\\-front to nail down the desired feature; by creating small incremental changes rather than sweeping monolithic updates; by collecting metrics on usage and flow; and by maintaining a \"fail fast\" mentality where we can pivot quickly. But all that might miss a key point: do we understand how the intended beneficiary of brilliance thinks? Do we know not only what they want, but why they want it? Or how they want it?\n\nThe ability to see things from this perspective is called \"technical empathy\". In this talk, I'll define what technical empathy is; describe how having technical empathy enhances our design choices, smooths the road to execution, and leads to better outcomes; and provide ideas on how developers and engineers can build technical empathy in themselves and foster it within teams.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/technical-empathy"
  },
  {
    "code": "LUKKXH",
    "title": "How to Do the Same Thing Over and Over Again and Yield Different Results",
    "slug": "how-to-do-the-same-thing-over-and-over-again-and-yield-different",
    "description": "<p>When I started working with Elasticsearch, the data in my index quickly needed to be updated. I built a solution using Cloud Functions and Cloud Scheduler in GCP to update my data automatically, a paradigm I've used for creative projects. This talk will outline strategies for automating routine processes while ensuring that the outcomes adapt to changing requirements, enhancing project innovation and data accuracy.</p>",
    "start_time": "2024-07-27T14:15:00-04:00",
    "end_time": "2024-07-27T14:45:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "Jessica Garson",
        "avatar": "https://pretalx.com/media/avatars/QJCEWP_7wJgt5h.jpeg",
        "code": "QJCEWP",
        "slug": "jessica-garson"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "How to Do the Same Thing Over and Over Again and Yield Different Results",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "When I started working with Elasticsearch, the data in my index quickly needed to be updated. I built a solution using Cloud Functions and Cloud Scheduler in GCP to update my data automatically, a paradigm I've used for creative projects. This talk will outline strategies for automating routine processes while ensuring that the outcomes adapt to changing requirements, enhancing project innovation and data accuracy.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/how-to-do-the-same-thing-over-and-over-again-and-yield-different",
    "speaker_names": "Jessica Garson",
    "description_youtube": "30 Minute Talk by Jessica Garson at PyOhio 2024:\nWhen I started working with Elasticsearch, the data in my index quickly needed to be updated. I built a solution using Cloud Functions and Cloud Scheduler in GCP to update my data automatically, a paradigm I've used for creative projects. This talk will outline strategies for automating routine processes while ensuring that the outcomes adapt to changing requirements, enhancing project innovation and data accuracy.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/how-to-do-the-same-thing-over-and-over-again-and-yield-different"
  },
  {
    "code": "EJSYK9",
    "title": "Keynote",
    "slug": "steph-hippo-keynote",
    "description": "<p>Steph Hippo presents our Saturday morning keynote.</p>",
    "start_time": "2024-07-27T09:15:00-04:00",
    "end_time": "2024-07-27T10:00:00-04:00",
    "room": "Orchid Ballroom",
    "duration": 45,
    "speakers": [
      {
        "name": "Steph Hippo",
        "avatar": "https://pretalx.com/media/avatars/UAVJNC_iiKYUPW.jpg",
        "code": "UAVJNC",
        "slug": "steph-hippo"
      }
    ],
    "type": "Keynote",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Steph Hippo presents our Saturday morning keynote.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/steph-hippo-keynote",
    "speaker_names": "Steph Hippo",
    "description_youtube": "Keynote by Steph Hippo at PyOhio 2024:\nSteph Hippo presents our Saturday morning keynote.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/steph-hippo-keynote"
  },
  {
    "code": "FAKV3H",
    "title": "Keynote: Brains Are Beautiful Liars",
    "slug": "trey-hunner-keynote",
    "description": "<p>Trey Hunner presents our Sunday afternoon keynote.</p>",
    "start_time": "2024-07-28T15:30:00-04:00",
    "end_time": "2024-07-28T16:15:00-04:00",
    "room": "Orchid Ballroom",
    "duration": 45,
    "speakers": [
      {
        "name": "Trey Hunner",
        "avatar": "https://pretalx.com/media/avatars/UYHZBE_xlJiRsH.jpg",
        "code": "UYHZBE",
        "slug": "trey-hunner"
      }
    ],
    "type": "Keynote",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Trey Hunner presents our Sunday afternoon keynote.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/trey-hunner-keynote",
    "speaker_names": "Trey Hunner",
    "description_youtube": "Keynote by Trey Hunner at PyOhio 2024:\nTrey Hunner presents our Sunday afternoon keynote.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/trey-hunner-keynote"
  },
  {
    "code": "KHNSQ3",
    "title": "Keynote: Changelong",
    "slug": "mariatta-keynote",
    "description": "<p>In open source projects, major changes to open source software are documented in Changelogs. Users can read the changelogs before updating their dependency to get a list of new features, bug fixes, and deprecations.</p>\n<p>But open source is not just about code, there is a community around it. Just like code gets improved and updated, other aspects of the community, like governance and infrastructure are also evolving, and yet such changes are usually more difficult to do and implement.</p>\n<p>This session discusses challenges in the Python open source community when it comes to making changes outside of code, and how us as a community can move forward to continue the evolution of Python as code and as community.</p>",
    "start_time": "2024-07-27T15:45:00-04:00",
    "end_time": "2024-07-27T16:30:00-04:00",
    "room": "Orchid Ballroom",
    "duration": 45,
    "speakers": [
      {
        "name": "Mariatta",
        "avatar": "https://pretalx.com/media/avatars/PTGUYZ_Qa9Ie5D.jpg",
        "code": "PTGUYZ",
        "slug": "mariatta"
      }
    ],
    "type": "Keynote",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "In open source projects, major changes to open source software are documented in Changelogs. Users can read the changelogs before updating their dependency to get a list of new features, bug fixes, and deprecations.\n\nBut open source is not just about code, there is a community around it. Just like code gets improved and updated, other aspects of the community, like governance and infrastructure are also evolving, and yet such changes are usually more difficult to do and implement.\n\nThis session discusses challenges in the Python open source community when it comes to making changes outside of code, and how us as a community can move forward to continue the evolution of Python as code and as community.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/mariatta-keynote",
    "speaker_names": "Mariatta",
    "description_youtube": "Keynote by Mariatta at PyOhio 2024:\nIn open source projects, major changes to open source software are documented in Changelogs. Users can read the changelogs before updating their dependency to get a list of new features, bug fixes, and deprecations.\n\nBut open source is not just about code, there is a community around it. Just like code gets improved and updated, other aspects of the community, like governance and infrastructure are also evolving, and yet such changes are usually more difficult to do and implement.\n\nThis session discusses challenges in the Python open source community when it comes to making changes outside of code, and how us as a community can move forward to continue the evolution of Python as code and as community.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/mariatta-keynote"
  },
  {
    "code": "YMAT93",
    "title": "Building Vector-Symbolic Architectures with Python",
    "slug": "building-vector-symbolic-architectures-with-python",
    "description": "<p>Vector-Symbolic Architectures (a.k.a. Hyperdimensional Computing) is a relatively new computational paradigm that involves the use of random vectors in a high-dimensional space to represent and process information. As a computational paradigm, it finds applications in a wide range of fields, including artificial intelligence, natural language processing, internet-of-things, robotics, bioinformatics, and other scientific domains.</p>\n<p>Here we are going to introduce some fundamental concepts at the base of Hyperdimensional Computing, following a presentation of <em>hdlib</em>, a library for building Vector-Symbolic Architectures with Python. Finally, we are going to see how to easily build a machine learning model based on the Hyperdimensional Computing paradigm as a practical use case.</p>\n<p>As a reference, <em>hdlib</em> is open-source, it is available on GitHub at <a href=\"https://github.com/cumbof/hdlib\"><a href=\"https://github.com/cumbof/hdlib\">https://github.com/cumbof/hdlib</a></a>, and it is published on the Journal of Open Source Software at <a href=\"https://doi.org/10.21105/joss.05704\"><a href=\"https://doi.org/10.21105/joss.05704\">https://doi.org/10.21105/joss.05704</a></a>.</p>",
    "start_time": "2024-07-28T14:00:00-04:00",
    "end_time": "2024-07-28T14:30:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "Fabio Cumbo",
        "avatar": "https://pretalx.com/media/avatars/CHGH3X_2dsv3hp.jpg",
        "code": "CHGH3X",
        "slug": "fabio-cumbo"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Building Vector-Symbolic Architectures with Python",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Vector\\-Symbolic Architectures (a.k.a. Hyperdimensional Computing) is a relatively new computational paradigm that involves the use of random vectors in a high\\-dimensional space to represent and process information. As a computational paradigm, it finds applications in a wide range of fields, including artificial intelligence, natural language processing, internet\\-of\\-things, robotics, bioinformatics, and other scientific domains.\n\nHere we are going to introduce some fundamental concepts at the base of Hyperdimensional Computing, following a presentation of *hdlib*, a library for building Vector\\-Symbolic Architectures with Python. Finally, we are going to see how to easily build a machine learning model based on the Hyperdimensional Computing paradigm as a practical use case.\n\nAs a reference, *hdlib* is open\\-source, it is available on GitHub at [https://github.com/cumbof/hdlib](https://github.com/cumbof/hdlib), and it is published on the Journal of Open Source Software at [[https://doi.org/10\\.21105/joss.05704](https://doi.org/10.21105/joss.05704)](https://doi.org/10.21105/joss.05704).\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/building-vector-symbolic-architectures-with-python",
    "speaker_names": "Fabio Cumbo",
    "description_youtube": "30 Minute Talk by Fabio Cumbo at PyOhio 2024:\nVector\\-Symbolic Architectures (a.k.a. Hyperdimensional Computing) is a relatively new computational paradigm that involves the use of random vectors in a high\\-dimensional space to represent and process information. As a computational paradigm, it finds applications in a wide range of fields, including artificial intelligence, natural language processing, internet\\-of\\-things, robotics, bioinformatics, and other scientific domains.\n\nHere we are going to introduce some fundamental concepts at the base of Hyperdimensional Computing, following a presentation of *hdlib*, a library for building Vector\\-Symbolic Architectures with Python. Finally, we are going to see how to easily build a machine learning model based on the Hyperdimensional Computing paradigm as a practical use case.\n\nAs a reference, *hdlib* is open\\-source, it is available on GitHub at [https://github.com/cumbof/hdlib](https://github.com/cumbof/hdlib), and it is published on the Journal of Open Source Software at [[https://doi.org/10\\.21105/joss.05704](https://doi.org/10.21105/joss.05704)](https://doi.org/10.21105/joss.05704).\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/building-vector-symbolic-architectures-with-python"
  },
  {
    "code": "XXQLZ3",
    "title": "Asyncio by Example",
    "slug": "asyncio-by-example",
    "description": "<p>Async functions in Python are a great way to simplify otherwise complex code involving network calls, database queries, or in general waiting and responding to \"events\". But before you can asycio.run you must learn how to walk-through some examples. </p>\n<p>This talk will start with the async/await basics, then show common patterns encountered when solving problems with Python's asyncio module, and introduce some of its newer features, such as Barriers, TaskGroups, and ExceptionGroups.</p>\n<p>This is a code-heavy, zero-to-hero talk where all the examples are run, and we can experiment and change the code if the audience has questions.</p>",
    "start_time": "2024-07-28T13:15:00-04:00",
    "end_time": "2024-07-28T13:45:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Andrew Kubera",
        "avatar": "https://pretalx.com/media/avatars/PWN7XL_fg646u1.jpg",
        "code": "PWN7XL",
        "slug": "andrew-kubera"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Asyncio by Example",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Async functions in Python are a great way to simplify otherwise complex code involving network calls, database queries, or in general waiting and responding to \"events\". But before you can asycio.run you must learn how to walk\\-through some examples. \n\nThis talk will start with the async/await basics, then show common patterns encountered when solving problems with Python's asyncio module, and introduce some of its newer features, such as Barriers, TaskGroups, and ExceptionGroups.\n\nThis is a code\\-heavy, zero\\-to\\-hero talk where all the examples are run, and we can experiment and change the code if the audience has questions.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/asyncio-by-example",
    "speaker_names": "Andrew Kubera",
    "description_youtube": "30 Minute Talk by Andrew Kubera at PyOhio 2024:\nAsync functions in Python are a great way to simplify otherwise complex code involving network calls, database queries, or in general waiting and responding to \"events\". But before you can asycio.run you must learn how to walk\\-through some examples. \n\nThis talk will start with the async/await basics, then show common patterns encountered when solving problems with Python's asyncio module, and introduce some of its newer features, such as Barriers, TaskGroups, and ExceptionGroups.\n\nThis is a code\\-heavy, zero\\-to\\-hero talk where all the examples are run, and we can experiment and change the code if the audience has questions.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/asyncio-by-example"
  },
  {
    "code": "FBZUBP",
    "title": "Python <3 Rust",
    "slug": "python-3-rust",
    "description": "<p>Python code can be sometimes slow, but is easy to iterate on and prototype in. Rust can be slower for iteration, but results in code that is both fast and safe. The two languages complement each other perfectly. The PyO3 framework bridges the gap in a way that avoids boilerplate. Learn how to use it to add a powerful tool for your toolbox!</p>",
    "start_time": "2024-07-27T14:15:00-04:00",
    "end_time": "2024-07-27T14:45:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Moshe Zadka",
        "avatar": "https://pretalx.com/media/avatars/KYYQVJ_HWCvrLr.jpg",
        "code": "KYYQVJ",
        "slug": "moshe-zadka"
      }
    ],
    "type": "30 Minute Talk",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Python code can be sometimes slow, but is easy to iterate on and prototype in. Rust can be slower for iteration, but results in code that is both fast and safe. The two languages complement each other perfectly. The PyO3 framework bridges the gap in a way that avoids boilerplate. Learn how to use it to add a powerful tool for your toolbox!\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/python-3-rust",
    "speaker_names": "Moshe Zadka",
    "description_youtube": "30 Minute Talk by Moshe Zadka at PyOhio 2024:\nPython code can be sometimes slow, but is easy to iterate on and prototype in. Rust can be slower for iteration, but results in code that is both fast and safe. The two languages complement each other perfectly. The PyO3 framework bridges the gap in a way that avoids boilerplate. Learn how to use it to add a powerful tool for your toolbox!\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/python-3-rust"
  },
  {
    "code": "8PZZLK",
    "title": "Introducing Immortal Objects: Building Block Towards a Multi-core Python Runtime",
    "slug": "introducing-immortal-objects-building-block-towards-a-multi-core",
    "description": "<p>In this presentation, I'll cover memory management in Python starting from the fundamentals. I'll explain the rationale behind the need for PEP 683: \"Immortal Objects, Using a Fixed Refcount\", discussing about this change may be unlocking exciting avenues for true parallelism in Python.</p>\n<p>The takeaway of this presentation would be :<br />\na) Refresher on object(mutable vs immutable and their significance)<br />\nb) Refresher on Life cycle of a Python object.<br />\nc) Refresher on Python memory management with garbage collection<br />\nd) How overcoming with pseudo immutable object will be unlocking exciting avenues for true parallelism in Python.</p>\n<p>The target audience would be intermediate and advanced pythonistas. However I will present the information in simple and subtle manner for better understanding of Python newbies.</p>",
    "start_time": "2024-07-28T13:15:00-04:00",
    "end_time": "2024-07-28T13:45:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "Aditya Mehra",
        "avatar": "https://pretalx.com/media/avatars/BPDLRN_eiLzNfr.png",
        "code": "BPDLRN",
        "slug": "aditya-mehra"
      }
    ],
    "type": "30 Minute Talk",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "In this presentation, I'll cover memory management in Python starting from the fundamentals. I'll explain the rationale behind the need for PEP 683: \"Immortal Objects, Using a Fixed Refcount\", discussing about this change may be unlocking exciting avenues for true parallelism in Python.\n\nThe takeaway of this presentation would be :  \n\na) Refresher on object(mutable vs immutable and their significance)  \n\nb) Refresher on Life cycle of a Python object.  \n\nc) Refresher on Python memory management with garbage collection  \n\nd) How overcoming with pseudo immutable object will be unlocking exciting avenues for true parallelism in Python.\n\nThe target audience would be intermediate and advanced pythonistas. However I will present the information in simple and subtle manner for better understanding of Python newbies.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/introducing-immortal-objects-building-block-towards-a-multi-core",
    "speaker_names": "Aditya Mehra",
    "description_youtube": "30 Minute Talk by Aditya Mehra at PyOhio 2024:\nIn this presentation, I'll cover memory management in Python starting from the fundamentals. I'll explain the rationale behind the need for PEP 683: \"Immortal Objects, Using a Fixed Refcount\", discussing about this change may be unlocking exciting avenues for true parallelism in Python.\n\nThe takeaway of this presentation would be :  \n\na) Refresher on object(mutable vs immutable and their significance)  \n\nb) Refresher on Life cycle of a Python object.  \n\nc) Refresher on Python memory management with garbage collection  \n\nd) How overcoming with pseudo immutable object will be unlocking exciting avenues for true parallelism in Python.\n\nThe target audience would be intermediate and advanced pythonistas. However I will present the information in simple and subtle manner for better understanding of Python newbies.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/introducing-immortal-objects-building-block-towards-a-multi-core"
  },
  {
    "code": "VWWTQF",
    "title": "Mastering the Zen of Dev Experience: Kubernetes and the Art of Simplicity",
    "slug": "mastering-the-zen-of-dev-experience-kubernetes-and-the-art-of",
    "description": "<p>Happy developers do not have to fight their tools and environment to be productive. They get set up in minutes, deploy without hesitation, and use the same tools to debug in any environment. In this talk and live demo, we'll explore how a Kubernetes-based development workflow can help you and your team hit the ground running.</p>\n<p>We will delve into establishing a powerful Django backend for server-side functionality and a dynamic React frontend for an engaging user experience. For databases, the setup will include a local Postgres database for development and CloudNativePG for production-level deployments. Additionally, the integration of Redis for enhanced application performance and email testing will be covered. </p>\n<p>This comprehensive approach ensures that onboarding a new developer on a project is streamlined, overcoming the typical pain points such as:</p>\n<ul>\n<li>manual installation steps </li>\n<li>the inconsistency of tools across development environments</li>\n</ul>\n<p>Kubernetes will empower your development and DevOps teams to speak a common language and collaborate effectively, standardizing deployments and debugging processes in local, preview, staging, and production environments.</p>",
    "start_time": "2024-07-28T13:15:00-04:00",
    "end_time": "2024-07-28T13:45:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "Calvin Hendryx-Parker",
        "avatar": "https://pretalx.com/media/avatars/ME3WGG_2M5BJfB.jpg",
        "code": "ME3WGG",
        "slug": "calvin-hendryx-parker"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Mastering the Zen of Dev Experience",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Happy developers do not have to fight their tools and environment to be productive. They get set up in minutes, deploy without hesitation, and use the same tools to debug in any environment. In this talk and live demo, we'll explore how a Kubernetes\\-based development workflow can help you and your team hit the ground running.\n\nWe will delve into establishing a powerful Django backend for server\\-side functionality and a dynamic React frontend for an engaging user experience. For databases, the setup will include a local Postgres database for development and CloudNativePG for production\\-level deployments. Additionally, the integration of Redis for enhanced application performance and email testing will be covered. \n\nThis comprehensive approach ensures that onboarding a new developer on a project is streamlined, overcoming the typical pain points such as:\n\n* manual installation steps\n* the inconsistency of tools across development environments\n\nKubernetes will empower your development and DevOps teams to speak a common language and collaborate effectively, standardizing deployments and debugging processes in local, preview, staging, and production environments.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/mastering-the-zen-of-dev-experience-kubernetes-and-the-art-of",
    "speaker_names": "Calvin Hendryx-Parker",
    "description_youtube": "30 Minute Talk by Calvin Hendryx-Parker at PyOhio 2024:\nHappy developers do not have to fight their tools and environment to be productive. They get set up in minutes, deploy without hesitation, and use the same tools to debug in any environment. In this talk and live demo, we'll explore how a Kubernetes\\-based development workflow can help you and your team hit the ground running.\n\nWe will delve into establishing a powerful Django backend for server\\-side functionality and a dynamic React frontend for an engaging user experience. For databases, the setup will include a local Postgres database for development and CloudNativePG for production\\-level deployments. Additionally, the integration of Redis for enhanced application performance and email testing will be covered. \n\nThis comprehensive approach ensures that onboarding a new developer on a project is streamlined, overcoming the typical pain points such as:\n\n* manual installation steps\n* the inconsistency of tools across development environments\n\nKubernetes will empower your development and DevOps teams to speak a common language and collaborate effectively, standardizing deployments and debugging processes in local, preview, staging, and production environments.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/mastering-the-zen-of-dev-experience-kubernetes-and-the-art-of"
  },
  {
    "code": "7GPCCR",
    "title": "Canceled: Gotta Go Fast! Using Asyncio for More Efficient Web Scraping",
    "slug": "canceled-gotta-go-fast-using-asyncio-for-more-efficient-web",
    "description": "<p><strong>We regret to announce that Samuel was unable to attend PyOhio and that this session has been canceled.</strong> Sorry, folks!</p>\n<hr />\n<p>The internet has a wide variety of information available for human consumption. But this data is often difficult to access programmatically if it doesn't come in the form of a dedicated API. With tools like Beautiful Soup, Python developers can parse data directly from web pages.</p>\n<p>There's just one problem: looping through HTTP requests for a bunch of URLs one by one can take forever! Luckily, we can speed things up dramatically by making these requests asynchronous. In this live-coding adventure we will explore how to use asyncio to improve the performance of your web scraping endeavors.</p>",
    "start_time": "2024-07-28T14:00:00-04:00",
    "end_time": "2024-07-28T14:30:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Samuel Agnew",
        "avatar": "https://pretalx.com/media/avatars/TDNT9P_opNjHOK.jpg",
        "code": "TDNT9P",
        "slug": "samuel-agnew"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Canceled",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "**We regret to announce that Samuel was unable to attend PyOhio and that this session has been canceled.** Sorry, folks!\n\n\n\n---\n\nThe internet has a wide variety of information available for human consumption. But this data is often difficult to access programmatically if it doesn't come in the form of a dedicated API. With tools like Beautiful Soup, Python developers can parse data directly from web pages.\n\nThere's just one problem: looping through HTTP requests for a bunch of URLs one by one can take forever! Luckily, we can speed things up dramatically by making these requests asynchronous. In this live\\-coding adventure we will explore how to use asyncio to improve the performance of your web scraping endeavors.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/canceled-gotta-go-fast-using-asyncio-for-more-efficient-web",
    "speaker_names": "Samuel Agnew",
    "description_youtube": "30 Minute Talk by Samuel Agnew at PyOhio 2024:\n**We regret to announce that Samuel was unable to attend PyOhio and that this session has been canceled.** Sorry, folks!\n\n\n\n---\n\nThe internet has a wide variety of information available for human consumption. But this data is often difficult to access programmatically if it doesn't come in the form of a dedicated API. With tools like Beautiful Soup, Python developers can parse data directly from web pages.\n\nThere's just one problem: looping through HTTP requests for a bunch of URLs one by one can take forever! Luckily, we can speed things up dramatically by making these requests asynchronous. In this live\\-coding adventure we will explore how to use asyncio to improve the performance of your web scraping endeavors.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/canceled-gotta-go-fast-using-asyncio-for-more-efficient-web"
  },
  {
    "code": "PMMXMD",
    "title": "Enhancing the JupyterLab Notebook to Overcome Bioinformatics Analysis Challenges with GiN",
    "slug": "enhancing-the-jupyterlab-notebook-to-overcome-bioinformatics-gin",
    "description": "<p>My talk is focused on GiN, (Galaxy in Notebooks) is an open-source JupyterLab extension powered by the Galaxy API and JupyterLab’s graphical widget interface. GiN provides a simple, GUI-based, user-friendly interface to interact with both local and public Galaxy servers from within JupyterLab. Galaxy (<a href=\"https://usegalaxy.org/\">https://usegalaxy.org/</a>) is a widely used open-source web-based platform for accessible, reproducible, and transparent big data analysis in biomedical research. JupyterLab is a powerful tool for data scientists, researchers, and developers who want to work with data and code in an interactive and collaborative environment. GiN enables researchers to execute all available Galaxy tools graphically, submit jobs, access history datasets, upload large data files with resumable uploads, and explore job details and output. GiN can be used with a Docker image, making it easy to keep GiN up and running on a local machine. The GiN recipe includes Python, JavaScript, and Node.js modules, and can be downloaded from GitHub and installed with the pip package manager.</p>",
    "start_time": "2024-07-27T10:15:00-04:00",
    "end_time": "2024-07-27T10:45:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "Jayadev Joshi",
        "avatar": "https://pretalx.com/media/avatars/SAEDGP_ZVKK1Cl.jpeg",
        "code": "SAEDGP",
        "slug": "jayadev-joshi"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Enhancing the JupyterLab Notebook to Overcome Bioinformatics Analysis Challenges with GiN",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "My talk is focused on GiN, (Galaxy in Notebooks) is an open\\-source JupyterLab extension powered by the Galaxy API and JupyterLab’s graphical widget interface. GiN provides a simple, GUI\\-based, user\\-friendly interface to interact with both local and public Galaxy servers from within JupyterLab. Galaxy (https://usegalaxy.org/) is a widely used open\\-source web\\-based platform for accessible, reproducible, and transparent big data analysis in biomedical research. JupyterLab is a powerful tool for data scientists, researchers, and developers who want to work with data and code in an interactive and collaborative environment. GiN enables researchers to execute all available Galaxy tools graphically, submit jobs, access history datasets, upload large data files with resumable uploads, and explore job details and output. GiN can be used with a Docker image, making it easy to keep GiN up and running on a local machine. The GiN recipe includes Python, JavaScript, and Node.js modules, and can be downloaded from GitHub and installed with the pip package manager.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/enhancing-the-jupyterlab-notebook-to-overcome-bioinformatics-gin",
    "speaker_names": "Jayadev Joshi",
    "description_youtube": "30 Minute Talk by Jayadev Joshi at PyOhio 2024:\nMy talk is focused on GiN, (Galaxy in Notebooks) is an open\\-source JupyterLab extension powered by the Galaxy API and JupyterLab’s graphical widget interface. GiN provides a simple, GUI\\-based, user\\-friendly interface to interact with both local and public Galaxy servers from within JupyterLab. Galaxy (https://usegalaxy.org/) is a widely used open\\-source web\\-based platform for accessible, reproducible, and transparent big data analysis in biomedical research. JupyterLab is a powerful tool for data scientists, researchers, and developers who want to work with data and code in an interactive and collaborative environment. GiN enables researchers to execute all available Galaxy tools graphically, submit jobs, access history datasets, upload large data files with resumable uploads, and explore job details and output. GiN can be used with a Docker image, making it easy to keep GiN up and running on a local machine. The GiN recipe includes Python, JavaScript, and Node.js modules, and can be downloaded from GitHub and installed with the pip package manager.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/enhancing-the-jupyterlab-notebook-to-overcome-bioinformatics-gin"
  },
  {
    "code": "DVJYEG",
    "title": "Stress Less: Easy Database Load Testing Using Python and Locust",
    "slug": "stress-less-easy-database-load-testing-using-python-and-locust",
    "description": "<h2>Overview</h2>\n<p>Many people have probably used Locust or a tool built on top of it (like Load Forge) in the past. These tools are primarily used for web application load testing by hitting public endpoints and monitoring how they respond. In this talk we review how to use Locust to load test a PostgreSQL database.</p>\n<h2>Additional Info</h2>\n<p>This is a link to an article I wrote about this topic: <a href=\"https://miguel-codes.medium.com/unconventional-load-testing-leveraging-python-locust-for-postgresql-stress-testing-d6e07d63714b\">https://miguel-codes.medium.com/unconventional-load-testing-leveraging-python-locust-for-postgresql-stress-testing-d6e07d63714b</a></p>",
    "start_time": "2024-07-28T12:30:00-04:00",
    "end_time": "2024-07-28T13:00:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Miguel Johnson",
        "avatar": "https://pretalx.com/media/avatars/8KG3AQ_RrSkxUz.png",
        "code": "8KG3AQ",
        "slug": "miguel-johnson"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Stress Less",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Overview\n--------\n\nMany people have probably used Locust or a tool built on top of it (like Load Forge) in the past. These tools are primarily used for web application load testing by hitting public endpoints and monitoring how they respond. In this talk we review how to use Locust to load test a PostgreSQL database.\n\nAdditional Info\n---------------\n\nThis is a link to an article I wrote about this topic: [https://miguel\\-codes.medium.com/unconventional\\-load\\-testing\\-leveraging\\-python\\-locust\\-for\\-postgresql\\-stress\\-testing\\-d6e07d63714b](https://miguel-codes.medium.com/unconventional-load-testing-leveraging-python-locust-for-postgresql-stress-testing-d6e07d63714b)\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/stress-less-easy-database-load-testing-using-python-and-locust",
    "speaker_names": "Miguel Johnson",
    "description_youtube": "30 Minute Talk by Miguel Johnson at PyOhio 2024:\nOverview\n--------\n\nMany people have probably used Locust or a tool built on top of it (like Load Forge) in the past. These tools are primarily used for web application load testing by hitting public endpoints and monitoring how they respond. In this talk we review how to use Locust to load test a PostgreSQL database.\n\nAdditional Info\n---------------\n\nThis is a link to an article I wrote about this topic: [https://miguel\\-codes.medium.com/unconventional\\-load\\-testing\\-leveraging\\-python\\-locust\\-for\\-postgresql\\-stress\\-testing\\-d6e07d63714b](https://miguel-codes.medium.com/unconventional-load-testing-leveraging-python-locust-for-postgresql-stress-testing-d6e07d63714b)\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/stress-less-easy-database-load-testing-using-python-and-locust"
  },
  {
    "code": "8WZN9J",
    "title": "A Python Sequence (Un)Packing Primer",
    "slug": "a-python-sequence-un-packing-primer",
    "description": "<p><em>What happens in Python when you type things like?</em></p>\n<pre class=\"highlight\"><code>def spam():\n    return 1,2,3\n\na, b, c = spam()\n</code></pre>\n\n<pre class=\"highlight\"><code>def foo(*args, **kwargs):\n   ...\n</code></pre>\n\n<pre class=\"highlight\"><code>for name, value in some_dict.items():\n</code></pre>\n\n<pre class=\"highlight\"><code>my_dict = some_func_that_returns_a_dict()\n\nsome_other_func(**my_dict)\n</code></pre>\n\n<p>In this talk, we'll examine Python's ability to unpack values from (or sometimes pack them into) sequences. We'll see how that capability powers a host of powerful Python idioms. We'll also look at some less commonly used syntax to unpack sequences into complex data structures. Used judiciously, these techniques can simplify your code. Last, we'll talk about mental models, and why it's important to develop good mental models for what's happening \"under-the-hood\" when we write Python. Well show what can (and did) happen when having the wrong mental model of unpacking syntax lead to a bug. We'll look at code that shows the problem, discuss what's really happening, then use the Python bytecode disassembler to confirm our intuition.</p>\n<p>Although this talk briefly uses the Python bytecode disassembler, it's aimed at beginners (though not complete novices) who want to write more idiomatic Python, and develop a better intuition for what's really happening in the interpreter when their code runs.</p>",
    "start_time": "2024-07-27T11:00:00-04:00",
    "end_time": "2024-07-27T11:30:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Brian Costlow",
        "avatar": "https://pretalx.com/media/avatars/BBWCPM_LmxKAHC.jpg",
        "code": "BBWCPM",
        "slug": "brian-costlow"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "A Python Sequence (Un)Packing Primer",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "*What happens in Python when you type things like?*\n\n\n```\ndef spam():\n    return 1,2,3\n\na, b, c = spam()\n\n```\n\n```\ndef foo(*args, **kwargs):\n   ...\n\n```\n\n```\nfor name, value in some_dict.items():\n\n```\n\n```\nmy_dict = some_func_that_returns_a_dict()\n\nsome_other_func(**my_dict)\n\n```\n\nIn this talk, we'll examine Python's ability to unpack values from (or sometimes pack them into) sequences. We'll see how that capability powers a host of powerful Python idioms. We'll also look at some less commonly used syntax to unpack sequences into complex data structures. Used judiciously, these techniques can simplify your code. Last, we'll talk about mental models, and why it's important to develop good mental models for what's happening \"under\\-the\\-hood\" when we write Python. Well show what can (and did) happen when having the wrong mental model of unpacking syntax lead to a bug. We'll look at code that shows the problem, discuss what's really happening, then use the Python bytecode disassembler to confirm our intuition.\n\nAlthough this talk briefly uses the Python bytecode disassembler, it's aimed at beginners (though not complete novices) who want to write more idiomatic Python, and develop a better intuition for what's really happening in the interpreter when their code runs.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/a-python-sequence-un-packing-primer",
    "speaker_names": "Brian Costlow",
    "description_youtube": "30 Minute Talk by Brian Costlow at PyOhio 2024:\n*What happens in Python when you type things like?*\n\n\n```\ndef spam():\n    return 1,2,3\n\na, b, c = spam()\n\n```\n\n```\ndef foo(*args, **kwargs):\n   ...\n\n```\n\n```\nfor name, value in some_dict.items():\n\n```\n\n```\nmy_dict = some_func_that_returns_a_dict()\n\nsome_other_func(**my_dict)\n\n```\n\nIn this talk, we'll examine Python's ability to unpack values from (or sometimes pack them into) sequences. We'll see how that capability powers a host of powerful Python idioms. We'll also look at some less commonly used syntax to unpack sequences into complex data structures. Used judiciously, these techniques can simplify your code. Last, we'll talk about mental models, and why it's important to develop good mental models for what's happening \"under\\-the\\-hood\" when we write Python. Well show what can (and did) happen when having the wrong mental model of unpacking syntax lead to a bug. We'll look at code that shows the problem, discuss what's really happening, then use the Python bytecode disassembler to confirm our intuition.\n\nAlthough this talk briefly uses the Python bytecode disassembler, it's aimed at beginners (though not complete novices) who want to write more idiomatic Python, and develop a better intuition for what's really happening in the interpreter when their code runs.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/a-python-sequence-un-packing-primer"
  },
  {
    "code": "8LLX9Y",
    "title": "Evolve or Die: How I Stopped Avoiding and Starting Loving Python Upgrades",
    "slug": "evolve-or-die-how-i-stopped-avoiding-and-starting-loving-python",
    "description": "<p>Imagine you’re all set to board a flight. You've got your book and snack, and you're nestled into your seat. The pilot assures you of a smooth journey ahead. Comforting, right? But for hundreds of thousands of airline passengers last holiday season, the reality was far from comforting. Remember the chaos? A major airline canceled around 17,000 flights due to outdated software in their crew scheduling system, leaving pilots clueless about their assignments.</p>\n<p>The fallout was severe: a 15% plummet in share price, a $400 million hit to revenue, and about $300 million in compensation costs—not to mention the lasting stain on their reputation.</p>\n<p>Now, let’s turn to you. What upgrades are you putting off? What will it cost you to delay?</p>\n<p>Fear of the unknown is a major driver of delaying upgrades and inadvertently risking security. Which deprecations in the standard library actually affect me? Do my packages support the next version of Python? If I upgrade one package, which other packages are affected?</p>\n<p>In my talk, I will demo how new tools—data that can be leveraged directly through Snowflake or through an app that also parses <code>requirements.txt</code> to do even more of the heavy lifting—can help the audience navigate minefields of Python upgrades and get to the latest Python version. The audience will also leave with practical, required actions for Python deprecations on popular platforms: AWS, Heroku, and AZURE.</p>",
    "start_time": "2024-07-28T14:00:00-04:00",
    "end_time": "2024-07-28T14:30:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Ruby Henry, Ph.d.",
        "avatar": "https://pretalx.com/media/avatars/KURFK3_Rb6Ijhd.png",
        "code": "KURFK3",
        "slug": "ruby-henry-ph-d"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Evolve or Die",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Imagine you’re all set to board a flight. You've got your book and snack, and you're nestled into your seat. The pilot assures you of a smooth journey ahead. Comforting, right? But for hundreds of thousands of airline passengers last holiday season, the reality was far from comforting. Remember the chaos? A major airline canceled around 17,000 flights due to outdated software in their crew scheduling system, leaving pilots clueless about their assignments.\n\nThe fallout was severe: a 15% plummet in share price, a $400 million hit to revenue, and about $300 million in compensation costs—not to mention the lasting stain on their reputation.\n\nNow, let’s turn to you. What upgrades are you putting off? What will it cost you to delay?\n\nFear of the unknown is a major driver of delaying upgrades and inadvertently risking security. Which deprecations in the standard library actually affect me? Do my packages support the next version of Python? If I upgrade one package, which other packages are affected?\n\nIn my talk, I will demo how new tools—data that can be leveraged directly through Snowflake or through an app that also parses `requirements.txt` to do even more of the heavy lifting—can help the audience navigate minefields of Python upgrades and get to the latest Python version. The audience will also leave with practical, required actions for Python deprecations on popular platforms: AWS, Heroku, and AZURE.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/evolve-or-die-how-i-stopped-avoiding-and-starting-loving-python",
    "speaker_names": "Ruby Henry, Ph.d.",
    "description_youtube": "30 Minute Talk by Ruby Henry, Ph.d. at PyOhio 2024:\nImagine you’re all set to board a flight. You've got your book and snack, and you're nestled into your seat. The pilot assures you of a smooth journey ahead. Comforting, right? But for hundreds of thousands of airline passengers last holiday season, the reality was far from comforting. Remember the chaos? A major airline canceled around 17,000 flights due to outdated software in their crew scheduling system, leaving pilots clueless about their assignments.\n\nThe fallout was severe: a 15% plummet in share price, a $400 million hit to revenue, and about $300 million in compensation costs—not to mention the lasting stain on their reputation.\n\nNow, let’s turn to you. What upgrades are you putting off? What will it cost you to delay?\n\nFear of the unknown is a major driver of delaying upgrades and inadvertently risking security. Which deprecations in the standard library actually affect me? Do my packages support the next version of Python? If I upgrade one package, which other packages are affected?\n\nIn my talk, I will demo how new tools—data that can be leveraged directly through Snowflake or through an app that also parses `requirements.txt` to do even more of the heavy lifting—can help the audience navigate minefields of Python upgrades and get to the latest Python version. The audience will also leave with practical, required actions for Python deprecations on popular platforms: AWS, Heroku, and AZURE.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/evolve-or-die-how-i-stopped-avoiding-and-starting-loving-python"
  },
  {
    "code": "ZDN8QP",
    "title": "Zen Commandments",
    "slug": "zen-commandments",
    "description": "<p>With the 20th anniversary of the Zen of Python coming up in August, now is the perfect time to reflect on how it has influenced the evolution of the Python language and how we write software in Python over the last 2 decades. Has Python moved closer to the ideals expounded in the Zen, or has it drifted further away? Like many great software engineering principles, different portions of the PEP are in contention with each other at times, which can be revealed in the features and patterns of the language. What does the current relationship between the language and the PEP say about the Python community and ecosystem as a whole, as well as perhaps the most important question: is the Zen of Python still relevant today?</p>",
    "start_time": "2024-07-28T14:00:00-04:00",
    "end_time": "2024-07-28T14:30:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "Paul Hutchings",
        "avatar": "https://pretalx.com/media/avatars/GLLNQF_75zv8KT.jpg",
        "code": "GLLNQF",
        "slug": "paul-hutchings"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Zen Commandments",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "With the 20th anniversary of the Zen of Python coming up in August, now is the perfect time to reflect on how it has influenced the evolution of the Python language and how we write software in Python over the last 2 decades. Has Python moved closer to the ideals expounded in the Zen, or has it drifted further away? Like many great software engineering principles, different portions of the PEP are in contention with each other at times, which can be revealed in the features and patterns of the language. What does the current relationship between the language and the PEP say about the Python community and ecosystem as a whole, as well as perhaps the most important question: is the Zen of Python still relevant today?\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/zen-commandments",
    "speaker_names": "Paul Hutchings",
    "description_youtube": "30 Minute Talk by Paul Hutchings at PyOhio 2024:\nWith the 20th anniversary of the Zen of Python coming up in August, now is the perfect time to reflect on how it has influenced the evolution of the Python language and how we write software in Python over the last 2 decades. Has Python moved closer to the ideals expounded in the Zen, or has it drifted further away? Like many great software engineering principles, different portions of the PEP are in contention with each other at times, which can be revealed in the features and patterns of the language. What does the current relationship between the language and the PEP say about the Python community and ecosystem as a whole, as well as perhaps the most important question: is the Zen of Python still relevant today?\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/zen-commandments"
  },
  {
    "code": "HPDBPB",
    "title": "Data Science & Agile: Strategies for Working Together",
    "slug": "data-science-agile-strategies-for-working-together",
    "description": "<p>Data science and Agile aren't famous for getting along. Data scientists complain that Agile frameworks are too restrictive and deadline-focused to accommodate the type of work they do. Scrum masters and product owners have a hard timing planning around unclear timelines and uncertain outcomes, and wish the data scientists would just tell them how much effort a task will take.</p>\n<p>But it doesn't have to be this way! Data science and Agile can work together to create a better system for everyone. In this talk I'll highlight tips and pitfalls from my own experience, as well as stories I've heard from my colleagues.</p>",
    "start_time": "2024-07-27T11:45:00-04:00",
    "end_time": "2024-07-27T12:15:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "Alyssa Batula",
        "avatar": "https://pretalx.com/media/avatars/EJKPCG_mDbcfYc.jpeg",
        "code": "EJKPCG",
        "slug": "alyssa-batula"
      }
    ],
    "type": "30 Minute Talk",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Data science and Agile aren't famous for getting along. Data scientists complain that Agile frameworks are too restrictive and deadline\\-focused to accommodate the type of work they do. Scrum masters and product owners have a hard timing planning around unclear timelines and uncertain outcomes, and wish the data scientists would just tell them how much effort a task will take.\n\nBut it doesn't have to be this way! Data science and Agile can work together to create a better system for everyone. In this talk I'll highlight tips and pitfalls from my own experience, as well as stories I've heard from my colleagues.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/data-science-agile-strategies-for-working-together",
    "speaker_names": "Alyssa Batula",
    "description_youtube": "30 Minute Talk by Alyssa Batula at PyOhio 2024:\nData science and Agile aren't famous for getting along. Data scientists complain that Agile frameworks are too restrictive and deadline\\-focused to accommodate the type of work they do. Scrum masters and product owners have a hard timing planning around unclear timelines and uncertain outcomes, and wish the data scientists would just tell them how much effort a task will take.\n\nBut it doesn't have to be this way! Data science and Agile can work together to create a better system for everyone. In this talk I'll highlight tips and pitfalls from my own experience, as well as stories I've heard from my colleagues.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/data-science-agile-strategies-for-working-together"
  },
  {
    "code": "DCZDL9",
    "title": "Canceled: Building Resilient Applications with Circuit Breakers and Retries Using FastAPI",
    "slug": "canceled-building-resilient-applications-with-circuit-breakers",
    "description": "<p><strong>We regret to announce that Sameer was unable to attend PyOhio and that this session has been canceled.</strong> Sorry, folks!</p>\n<hr />\n<p>In this session, we will explore techniques for building resilient applications that can gracefully handle failures and ensure high availability. Specifically, we will focus on implementing circuit breakers and retry mechanisms using FastAPI. By the end of this talk, attendees will understand the principles behind these patterns and see a live demonstration of how to implement them in a FastAPI application.</p>",
    "start_time": "2024-07-27T11:00:00-04:00",
    "end_time": "2024-07-27T11:30:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Sameer Shukla",
        "avatar": "https://pretalx.com/media/avatars/HMNDYW_06M3H5l.jpeg",
        "code": "HMNDYW",
        "slug": "sameer-shukla"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Canceled",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "**We regret to announce that Sameer was unable to attend PyOhio and that this session has been canceled.** Sorry, folks!\n\n\n\n---\n\nIn this session, we will explore techniques for building resilient applications that can gracefully handle failures and ensure high availability. Specifically, we will focus on implementing circuit breakers and retry mechanisms using FastAPI. By the end of this talk, attendees will understand the principles behind these patterns and see a live demonstration of how to implement them in a FastAPI application.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/canceled-building-resilient-applications-with-circuit-breakers",
    "speaker_names": "Sameer Shukla",
    "description_youtube": "30 Minute Talk by Sameer Shukla at PyOhio 2024:\n**We regret to announce that Sameer was unable to attend PyOhio and that this session has been canceled.** Sorry, folks!\n\n\n\n---\n\nIn this session, we will explore techniques for building resilient applications that can gracefully handle failures and ensure high availability. Specifically, we will focus on implementing circuit breakers and retry mechanisms using FastAPI. By the end of this talk, attendees will understand the principles behind these patterns and see a live demonstration of how to implement them in a FastAPI application.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/canceled-building-resilient-applications-with-circuit-breakers"
  },
  {
    "code": "YAQZHH",
    "title": "Signal Processing in Electrochemistry with Python: Applications to the US Opioids Crisis",
    "slug": "signal-processing-in-electrochemistry-with-python-applications",
    "description": "<p>With an average of 195 daily deaths due to synthetic opioids overdose in 2021, the US have been facing an unprecedented opioids crisis. Fentanyl and its analogues have been a major source of concern, due to their high levels of addiction, fast-acting mechanisms, and detection challenges. Fast, effective, and accurate identification and quantification of fentanyl, its analogues, and metabolites are essential to help prevent overdose-related incidents and to enable agile medical response. Although electrochemical sensors represent a promising technology for selectively detecting opioids at low concentrations, analyzing and processing the data remains one of the major challenges. To tackle this challenge, certain Python libraries, such as <em>scipy.signal</em>, could be useful in processing signals with high levels of noise and interference from other substances. </p>\n<p>This talk will focus on specific examples of how such libraries could help enable filtering, Fourier transformation, and wavelet analysis of electrochemical data. As examples, code snippets and outputs will be shown to demonstrate how Python can help improve the quality and usability of electrochemical data. Additionally, this talk will show how data processing can further benefit from hyper parameter optimization techniques, enabled by libraries like <em>hyperopt</em> and <em>ray-tune</em>. By doing so, my hope is to demonstrate how Python could be extremely useful in helping address problems at the intersection of statistics, public health, and public policy.</p>",
    "start_time": "2024-07-28T12:30:00-04:00",
    "end_time": "2024-07-28T13:00:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Rodrigo Silva Ferreira",
        "avatar": "https://pretalx.com/media/avatars/UYRBHX_gusMbKM.png",
        "code": "UYRBHX",
        "slug": "rodrigo-silva-ferreira"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Signal Processing in Electrochemistry with Python",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "With an average of 195 daily deaths due to synthetic opioids overdose in 2021, the US have been facing an unprecedented opioids crisis. Fentanyl and its analogues have been a major source of concern, due to their high levels of addiction, fast\\-acting mechanisms, and detection challenges. Fast, effective, and accurate identification and quantification of fentanyl, its analogues, and metabolites are essential to help prevent overdose\\-related incidents and to enable agile medical response. Although electrochemical sensors represent a promising technology for selectively detecting opioids at low concentrations, analyzing and processing the data remains one of the major challenges. To tackle this challenge, certain Python libraries, such as *scipy.signal*, could be useful in processing signals with high levels of noise and interference from other substances. \n\nThis talk will focus on specific examples of how such libraries could help enable filtering, Fourier transformation, and wavelet analysis of electrochemical data. As examples, code snippets and outputs will be shown to demonstrate how Python can help improve the quality and usability of electrochemical data. Additionally, this talk will show how data processing can further benefit from hyper parameter optimization techniques, enabled by libraries like *hyperopt* and *ray\\-tune*. By doing so, my hope is to demonstrate how Python could be extremely useful in helping address problems at the intersection of statistics, public health, and public policy.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/signal-processing-in-electrochemistry-with-python-applications",
    "speaker_names": "Rodrigo Silva Ferreira",
    "description_youtube": "30 Minute Talk by Rodrigo Silva Ferreira at PyOhio 2024:\nWith an average of 195 daily deaths due to synthetic opioids overdose in 2021, the US have been facing an unprecedented opioids crisis. Fentanyl and its analogues have been a major source of concern, due to their high levels of addiction, fast\\-acting mechanisms, and detection challenges. Fast, effective, and accurate identification and quantification of fentanyl, its analogues, and metabolites are essential to help prevent overdose\\-related incidents and to enable agile medical response. Although electrochemical sensors represent a promising technology for selectively detecting opioids at low concentrations, analyzing and processing the data remains one of the major challenges. To tackle this challenge, certain Python libraries, such as *scipy.signal*, could be useful in processing signals with high levels of noise and interference from other substances. \n\nThis talk will focus on specific examples of how such libraries could help enable filtering, Fourier transformation, and wavelet analysis of electrochemical data. As examples, code snippets and outputs will be shown to demonstrate how Python can help improve the quality and usability of electrochemical data. Additionally, this talk will show how data processing can further benefit from hyper parameter optimization techniques, enabled by libraries like *hyperopt* and *ray\\-tune*. By doing so, my hope is to demonstrate how Python could be extremely useful in helping address problems at the intersection of statistics, public health, and public policy.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/signal-processing-in-electrochemistry-with-python-applications"
  },
  {
    "code": "YZMLAA",
    "title": "Device Authorization Flow 101: Logging in From Input Constrained Devices",
    "slug": "device-authorization-flow-101-logging-in-from-input-constrained",
    "description": "<p>Have you ever heard of device authorization flow? You may have not heard it but good chances are you already used it.</p>\n<p>Device flow allows you to login to your applications on input constrained devices, think of IoT devices or smart TVs for example.</p>\n<p>Great applications allow the user to continue the login process on a more comfortable device instead of using, for example, the virtual keyboard on a SmartTV.</p>\n<p>If you are developing applications that need this type of connectivity come to this talk to learn what device flow actually is, how it works, and better yet, see it working in an application that integrates Python (using FastAPI) and Micropython.</p>",
    "start_time": "2024-07-28T13:15:00-04:00",
    "end_time": "2024-07-28T13:45:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Jessica Temporal",
        "avatar": "https://pretalx.com/media/avatars/V9AARY_4E6ldZj.png",
        "code": "V9AARY",
        "slug": "jessica-temporal"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Device Authorization Flow 101",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Have you ever heard of device authorization flow? You may have not heard it but good chances are you already used it.\n\nDevice flow allows you to login to your applications on input constrained devices, think of IoT devices or smart TVs for example.\n\nGreat applications allow the user to continue the login process on a more comfortable device instead of using, for example, the virtual keyboard on a SmartTV.\n\nIf you are developing applications that need this type of connectivity come to this talk to learn what device flow actually is, how it works, and better yet, see it working in an application that integrates Python (using FastAPI) and Micropython.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/device-authorization-flow-101-logging-in-from-input-constrained",
    "speaker_names": "Jessica Temporal",
    "description_youtube": "30 Minute Talk by Jessica Temporal at PyOhio 2024:\nHave you ever heard of device authorization flow? You may have not heard it but good chances are you already used it.\n\nDevice flow allows you to login to your applications on input constrained devices, think of IoT devices or smart TVs for example.\n\nGreat applications allow the user to continue the login process on a more comfortable device instead of using, for example, the virtual keyboard on a SmartTV.\n\nIf you are developing applications that need this type of connectivity come to this talk to learn what device flow actually is, how it works, and better yet, see it working in an application that integrates Python (using FastAPI) and Micropython.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/device-authorization-flow-101-logging-in-from-input-constrained"
  },
  {
    "code": "Y8BHML",
    "title": "Simplifying Python Web App Operations: Automating K8s Ops with Open Source",
    "slug": "simplifying-python-web-app-operations-automating-k8s-ops-with",
    "description": "<p>After creating a great web app using Python such as with flask, the next hurdle to production is how to make it available to users and operate it. And not just your app, but also ingress, the database, observability and the list goes on. We will go through your options for simplifying the operations of your web app using open source tooling. This will include using k8s directly, helm charts, IaaC using pulumi and new tooling developed by Canonical using juju. By the end of the talk you will have seen the benefits and drawbacks of each which will help you make an informed decision on which tool best suits your needs!</p>",
    "start_time": "2024-07-27T11:45:00-04:00",
    "end_time": "2024-07-27T12:15:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "David Andersson",
        "avatar": "https://pretalx.com/media/avatars/ATDLZU_EArq8Iq.jpeg",
        "code": "ATDLZU",
        "slug": "david-andersson"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Simplifying Python Web App Operations",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "After creating a great web app using Python such as with flask, the next hurdle to production is how to make it available to users and operate it. And not just your app, but also ingress, the database, observability and the list goes on. We will go through your options for simplifying the operations of your web app using open source tooling. This will include using k8s directly, helm charts, IaaC using pulumi and new tooling developed by Canonical using juju. By the end of the talk you will have seen the benefits and drawbacks of each which will help you make an informed decision on which tool best suits your needs!\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/simplifying-python-web-app-operations-automating-k8s-ops-with",
    "speaker_names": "David Andersson",
    "description_youtube": "30 Minute Talk by David Andersson at PyOhio 2024:\nAfter creating a great web app using Python such as with flask, the next hurdle to production is how to make it available to users and operate it. And not just your app, but also ingress, the database, observability and the list goes on. We will go through your options for simplifying the operations of your web app using open source tooling. This will include using k8s directly, helm charts, IaaC using pulumi and new tooling developed by Canonical using juju. By the end of the talk you will have seen the benefits and drawbacks of each which will help you make an informed decision on which tool best suits your needs!\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/simplifying-python-web-app-operations-automating-k8s-ops-with"
  },
  {
    "code": "NZWEHD",
    "title": "So, I Got Some Code Working… Now How Do I Share It?!",
    "slug": "so-i-got-some-code-working-now-how-do-i-share-it",
    "description": "<p>You have some code running locally, but you want to be able to share it with your team members and you run into the biggest snag of all, none of them are technical. </p>\n<p>So how do you share code when the idea of asking someone to run git or docker stops them from every trying to automate the boring work that they have to do? </p>\n<p>Let's dive into the fun of trying to go from trying to share code and have others run it. From sharing a Juypter notebook/Google Collab, to new places like py.space, or even trying to host a web app on PythonAnywhere, what are the easiest solutions to get code snippets up and running for non-technical people?</p>",
    "start_time": "2024-07-27T10:15:00-04:00",
    "end_time": "2024-07-27T10:45:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Elaine Wong",
        "avatar": "https://pretalx.com/media/avatars/Q8HPFK_TlFDuUd.jpeg",
        "code": "Q8HPFK",
        "slug": "elaine-wong"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "So, I Got Some Code Working… Now How Do I Share It",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "You have some code running locally, but you want to be able to share it with your team members and you run into the biggest snag of all, none of them are technical. \n\nSo how do you share code when the idea of asking someone to run git or docker stops them from every trying to automate the boring work that they have to do? \n\nLet's dive into the fun of trying to go from trying to share code and have others run it. From sharing a Juypter notebook/Google Collab, to new places like py.space, or even trying to host a web app on PythonAnywhere, what are the easiest solutions to get code snippets up and running for non\\-technical people?\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/so-i-got-some-code-working-now-how-do-i-share-it",
    "speaker_names": "Elaine Wong",
    "description_youtube": "30 Minute Talk by Elaine Wong at PyOhio 2024:\nYou have some code running locally, but you want to be able to share it with your team members and you run into the biggest snag of all, none of them are technical. \n\nSo how do you share code when the idea of asking someone to run git or docker stops them from every trying to automate the boring work that they have to do? \n\nLet's dive into the fun of trying to go from trying to share code and have others run it. From sharing a Juypter notebook/Google Collab, to new places like py.space, or even trying to host a web app on PythonAnywhere, what are the easiest solutions to get code snippets up and running for non\\-technical people?\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/so-i-got-some-code-working-now-how-do-i-share-it"
  },
  {
    "code": "P397LH",
    "title": "Data Engineering: The World Between Worlds",
    "slug": "data-engineering-the-world-between-worlds",
    "description": "<p>Data engineering is an often misunderstood, conflated range of skills from database administration, analytics, ETL, cloud infrastructure, big data and back. As someone who worked as a data engineer for just over 5 years, I’d love to share my stories about my time as a data engineer to pull back the curtain on what kind of value you might be able to get from data engineering as the heat of ML Ops and AI takes flight, both as organization and individual. Notably, many data engineering teams heavily leverage Python due to the depth and breadth of the data libraries, and the ease by which folks can learn Python to start creating value within the space. We'll also talk about a few of the key libraries that you can learn to set yourself apart if you decide data engineering is for you!</p>",
    "start_time": "2024-07-27T15:00:00-04:00",
    "end_time": "2024-07-27T15:30:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Rainu Ittycheriah",
        "avatar": "https://pretalx.com/media/avatars/R9HB7N_VZLB9si.png",
        "code": "R9HB7N",
        "slug": "rainu-ittycheriah"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Data Engineering",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Data engineering is an often misunderstood, conflated range of skills from database administration, analytics, ETL, cloud infrastructure, big data and back. As someone who worked as a data engineer for just over 5 years, I’d love to share my stories about my time as a data engineer to pull back the curtain on what kind of value you might be able to get from data engineering as the heat of ML Ops and AI takes flight, both as organization and individual. Notably, many data engineering teams heavily leverage Python due to the depth and breadth of the data libraries, and the ease by which folks can learn Python to start creating value within the space. We'll also talk about a few of the key libraries that you can learn to set yourself apart if you decide data engineering is for you!\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/data-engineering-the-world-between-worlds",
    "speaker_names": "Rainu Ittycheriah",
    "description_youtube": "30 Minute Talk by Rainu Ittycheriah at PyOhio 2024:\nData engineering is an often misunderstood, conflated range of skills from database administration, analytics, ETL, cloud infrastructure, big data and back. As someone who worked as a data engineer for just over 5 years, I’d love to share my stories about my time as a data engineer to pull back the curtain on what kind of value you might be able to get from data engineering as the heat of ML Ops and AI takes flight, both as organization and individual. Notably, many data engineering teams heavily leverage Python due to the depth and breadth of the data libraries, and the ease by which folks can learn Python to start creating value within the space. We'll also talk about a few of the key libraries that you can learn to set yourself apart if you decide data engineering is for you!\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/data-engineering-the-world-between-worlds"
  },
  {
    "code": "ZXHQKT",
    "title": "23, Python and Me: Using Machine Learning in Python to Analyze Consumer Genomics Data",
    "slug": "23-python-and-me-using-machine-learning-in-python-to-analyze",
    "description": "<p>We are over 20 years into the genomics era, with new insights into human health and our recent evolutionary history emerging almost daily. Genomics may seem like the province of PhDs and R&amp;D departments, but anyone with basic Python skills can navigate a genomics data pipeline and explore human genetic diversity, including their own! In this presentation, I will introduce the fields of population and health genomics, and the types of domain-specific data used for genomics study. I will then demonstrate how you can use Python to visualize and analyze public data sources like the 1000 Genomes Project using unsupervised machine learning methods, and how to investigate your own genomics data from sources like <em>23andMe</em>. Since many people are not comfortable giving for-profit companies access to their genomic data, I'll also show how you can simulate realistic personal genomic data via a supervised ML model.</p>",
    "start_time": "2024-07-28T14:45:00-04:00",
    "end_time": "2024-07-28T15:15:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "Nathan Brouwer",
        "avatar": "https://pretalx.com/media/avatars/C3JF9W_DJ5BNnD.jpg",
        "code": "C3JF9W",
        "slug": "nathan-brouwer"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "23, Python and Me",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "We are over 20 years into the genomics era, with new insights into human health and our recent evolutionary history emerging almost daily. Genomics may seem like the province of PhDs and R\\&D departments, but anyone with basic Python skills can navigate a genomics data pipeline and explore human genetic diversity, including their own! In this presentation, I will introduce the fields of population and health genomics, and the types of domain\\-specific data used for genomics study. I will then demonstrate how you can use Python to visualize and analyze public data sources like the 1000 Genomes Project using unsupervised machine learning methods, and how to investigate your own genomics data from sources like *23andMe*. Since many people are not comfortable giving for\\-profit companies access to their genomic data, I'll also show how you can simulate realistic personal genomic data via a supervised ML model.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/23-python-and-me-using-machine-learning-in-python-to-analyze",
    "speaker_names": "Nathan Brouwer",
    "description_youtube": "30 Minute Talk by Nathan Brouwer at PyOhio 2024:\nWe are over 20 years into the genomics era, with new insights into human health and our recent evolutionary history emerging almost daily. Genomics may seem like the province of PhDs and R\\&D departments, but anyone with basic Python skills can navigate a genomics data pipeline and explore human genetic diversity, including their own! In this presentation, I will introduce the fields of population and health genomics, and the types of domain\\-specific data used for genomics study. I will then demonstrate how you can use Python to visualize and analyze public data sources like the 1000 Genomes Project using unsupervised machine learning methods, and how to investigate your own genomics data from sources like *23andMe*. Since many people are not comfortable giving for\\-profit companies access to their genomic data, I'll also show how you can simulate realistic personal genomic data via a supervised ML model.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/23-python-and-me-using-machine-learning-in-python-to-analyze"
  },
  {
    "code": "WMJDDE",
    "title": "Wagtail: The Python CMS Taking the World by Storm",
    "slug": "wagtail-the-python-cms-taking-the-world-by-storm",
    "description": "<p>What do NASA, Google Blogs, The Motley Fool, CFPB.gov, and the British National Health Service all have in common? Their websites are powered by Wagtail, the fastest-growing Python CMS that you've probably never heard of. Because it is 100% free and open-source, you can build your own website with Wagtail too!</p>\n<p>We'll discuss:</p>\n<ul>\n<li>What is Wagtail and what does it do?</li>\n<li>How does it compare to other systems such as WordPress?</li>\n<li>Overview of the Wagtail open-source project; how a team of volunteers makes this all possible.</li>\n<li>Demo and brief getting started tutorial</li>\n</ul>",
    "start_time": "2024-07-28T14:45:00-04:00",
    "end_time": "2024-07-28T15:15:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "Vince Salvino",
        "avatar": "https://pretalx.com/media/avatars/R3UWNF_CpYK5G1.jpg",
        "code": "R3UWNF",
        "slug": "vince-salvino"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Wagtail",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "What do NASA, Google Blogs, The Motley Fool, CFPB.gov, and the British National Health Service all have in common? Their websites are powered by Wagtail, the fastest\\-growing Python CMS that you've probably never heard of. Because it is 100% free and open\\-source, you can build your own website with Wagtail too!\n\nWe'll discuss:\n\n* What is Wagtail and what does it do?\n* How does it compare to other systems such as WordPress?\n* Overview of the Wagtail open\\-source project; how a team of volunteers makes this all possible.\n* Demo and brief getting started tutorial\n",
    "talk_url": "https://www.pyohio.org/2024/talks/wagtail-the-python-cms-taking-the-world-by-storm",
    "speaker_names": "Vince Salvino",
    "description_youtube": "30 Minute Talk by Vince Salvino at PyOhio 2024:\nWhat do NASA, Google Blogs, The Motley Fool, CFPB.gov, and the British National Health Service all have in common? Their websites are powered by Wagtail, the fastest\\-growing Python CMS that you've probably never heard of. Because it is 100% free and open\\-source, you can build your own website with Wagtail too!\n\nWe'll discuss:\n\n* What is Wagtail and what does it do?\n* How does it compare to other systems such as WordPress?\n* Overview of the Wagtail open\\-source project; how a team of volunteers makes this all possible.\n* Demo and brief getting started tutorial\nPyOhio talk listing: https://www.pyohio.org/2024/talks/wagtail-the-python-cms-taking-the-world-by-storm"
  },
  {
    "code": "QE87TH",
    "title": "Quantum Computing with Qiskit in Galaxy",
    "slug": "quantum-computing-with-qiskit-in-galaxy",
    "description": "<p>The era of quantum computing is here. As it continues to evolve from being a technology in its infancy, to something that could revolutionize many aspects of daily life, it is capturing the interest of academia, government, and industry alike. It is thus of great importance for members of the scientific community to familiarize themselves with the theory and applications of this new computing method -- and especially how to program and develop algorithms on these devices.</p>\n<p>In this talk, we'll take a look at the incorporation of Qiskit, IBM's Python-based software stack for quantum computing, into the Galaxy ecosystem. We'll revisit the basic theory of quantum computing along with the many important components of the coding framework and syntaxes, and we'll explore a series of previously developed Qiskit tutorials and Jupyter notebooks, presenting new ways of solving some of the most relevant problems in contemporary science and engineering.</p>",
    "start_time": "2024-07-27T11:00:00-04:00",
    "end_time": "2024-07-27T11:30:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "Bryan Raubenolt",
        "avatar": "https://pretalx.com/media/avatars/VBWRLY_CI8NEcT.jpeg",
        "code": "VBWRLY",
        "slug": "bryan-raubenolt"
      }
    ],
    "type": "30 Minute Talk",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "The era of quantum computing is here. As it continues to evolve from being a technology in its infancy, to something that could revolutionize many aspects of daily life, it is capturing the interest of academia, government, and industry alike. It is thus of great importance for members of the scientific community to familiarize themselves with the theory and applications of this new computing method \\-\\- and especially how to program and develop algorithms on these devices.\n\nIn this talk, we'll take a look at the incorporation of Qiskit, IBM's Python\\-based software stack for quantum computing, into the Galaxy ecosystem. We'll revisit the basic theory of quantum computing along with the many important components of the coding framework and syntaxes, and we'll explore a series of previously developed Qiskit tutorials and Jupyter notebooks, presenting new ways of solving some of the most relevant problems in contemporary science and engineering.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/quantum-computing-with-qiskit-in-galaxy",
    "speaker_names": "Bryan Raubenolt",
    "description_youtube": "30 Minute Talk by Bryan Raubenolt at PyOhio 2024:\nThe era of quantum computing is here. As it continues to evolve from being a technology in its infancy, to something that could revolutionize many aspects of daily life, it is capturing the interest of academia, government, and industry alike. It is thus of great importance for members of the scientific community to familiarize themselves with the theory and applications of this new computing method \\-\\- and especially how to program and develop algorithms on these devices.\n\nIn this talk, we'll take a look at the incorporation of Qiskit, IBM's Python\\-based software stack for quantum computing, into the Galaxy ecosystem. We'll revisit the basic theory of quantum computing along with the many important components of the coding framework and syntaxes, and we'll explore a series of previously developed Qiskit tutorials and Jupyter notebooks, presenting new ways of solving some of the most relevant problems in contemporary science and engineering.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/quantum-computing-with-qiskit-in-galaxy"
  },
  {
    "code": "DQNF8G",
    "title": "Hot: Pathlib, Not: String Paths",
    "slug": "hot-pathlib-not-string-paths",
    "description": "<p>Have you seen <code>pathlib</code>?  If not, once I show you, you will never go back to string paths and <code>os.path</code> ever again! <code>pathlib</code> turns paths into path objects, which have attributes and methods that cover a number of operations. In this talk, we will:</p>\n<ul>\n<li>Talk about how to create <code>Path</code> objects, and how this differs on Windows vs Mac/Linux</li>\n<li>Talk about the many properties of pure paths</li>\n<li>Talk about folder operations from <code>Path</code> objects, such as creating directory structures and recursive globbing.</li>\n<li>Talk about file operations, made simpler with <code>Path</code> objects, such as reading contents, getting properties like file size, and deleting.</li>\n</ul>\n<p>Stop messing with string paths and get with <code>pathlib</code>!</p>",
    "start_time": "2024-07-28T12:30:00-04:00",
    "end_time": "2024-07-28T13:00:00-04:00",
    "room": "Cattleya",
    "duration": 30,
    "speakers": [
      {
        "name": "Josh Schneider",
        "avatar": "https://pretalx.com/media/avatars/UKGFFX_N1dcoFZ.jpeg",
        "code": "UKGFFX",
        "slug": "josh-schneider"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Hot",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Have you seen `pathlib`? If not, once I show you, you will never go back to string paths and `os.path` ever again! `pathlib` turns paths into path objects, which have attributes and methods that cover a number of operations. In this talk, we will:\n\n* Talk about how to create `Path` objects, and how this differs on Windows vs Mac/Linux\n* Talk about the many properties of pure paths\n* Talk about folder operations from `Path` objects, such as creating directory structures and recursive globbing.\n* Talk about file operations, made simpler with `Path` objects, such as reading contents, getting properties like file size, and deleting.\n\nStop messing with string paths and get with `pathlib`!\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/hot-pathlib-not-string-paths",
    "speaker_names": "Josh Schneider",
    "description_youtube": "30 Minute Talk by Josh Schneider at PyOhio 2024:\nHave you seen `pathlib`? If not, once I show you, you will never go back to string paths and `os.path` ever again! `pathlib` turns paths into path objects, which have attributes and methods that cover a number of operations. In this talk, we will:\n\n* Talk about how to create `Path` objects, and how this differs on Windows vs Mac/Linux\n* Talk about the many properties of pure paths\n* Talk about folder operations from `Path` objects, such as creating directory structures and recursive globbing.\n* Talk about file operations, made simpler with `Path` objects, such as reading contents, getting properties like file size, and deleting.\n\nStop messing with string paths and get with `pathlib`!\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/hot-pathlib-not-string-paths"
  },
  {
    "code": "EWVQHG",
    "title": "Validating Complex Types Using Pydantic",
    "slug": "validating-complex-types-using-pydantic",
    "description": "<p>For some Python Objects it is difficult to understand its contents, even if type annotations are used.  For example, PyTorch's <code>Tensor</code> or Pandas's <code>DataFrame</code> have many different \"shapes\" to their data structures, but their type annotations are always the same.  This can make it very difficult to understand functions that utilize these objects as parameters or return these objects.  When reviewing code, it is very common to ask these sorts of questions: </p>\n<ul>\n<li>What is the shape of the <code>Tensor</code> I need to pass in?</li>\n<li>What columns does this <code>DataFrame</code> need to have? </li>\n</ul>\n<p>In this talk, we will describe how to utilize typing metadata and Pydantic to not only provide additional context for these data structures, but to validate the input/output of functions as well.</p>\n<p>Links for the talk:<br />\n- <a href=\"https://github.com/dschelkoph/ds_validator_talk\">Notebook</a> used in talk; dev container compatible<br />\n- <a href=\"https://pypi.org/project/ds_validator/\">ds_validator</a>, the package demonstrated in the talk</p>",
    "start_time": "2024-07-27T14:15:00-04:00",
    "end_time": "2024-07-27T14:45:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Daniel Schelkoph",
        "avatar": "https://pretalx.com/media/avatars/NL3RWX_bwKyIfi.jpeg",
        "code": "NL3RWX",
        "slug": "daniel-schelkoph"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Validating Complex Types Using Pydantic",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "For some Python Objects it is difficult to understand its contents, even if type annotations are used. For example, PyTorch's `Tensor` or Pandas's `DataFrame` have many different \"shapes\" to their data structures, but their type annotations are always the same. This can make it very difficult to understand functions that utilize these objects as parameters or return these objects. When reviewing code, it is very common to ask these sorts of questions: \n\n* What is the shape of the `Tensor` I need to pass in?\n* What columns does this `DataFrame` need to have?\n\nIn this talk, we will describe how to utilize typing metadata and Pydantic to not only provide additional context for these data structures, but to validate the input/output of functions as well.\n\nLinks for the talk:  \n\n\\- [Notebook](https://github.com/dschelkoph/ds_validator_talk) used in talk; dev container compatible  \n\n\\- [ds\\_validator](https://pypi.org/project/ds_validator/), the package demonstrated in the talk\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/validating-complex-types-using-pydantic",
    "speaker_names": "Daniel Schelkoph",
    "description_youtube": "30 Minute Talk by Daniel Schelkoph at PyOhio 2024:\nFor some Python Objects it is difficult to understand its contents, even if type annotations are used. For example, PyTorch's `Tensor` or Pandas's `DataFrame` have many different \"shapes\" to their data structures, but their type annotations are always the same. This can make it very difficult to understand functions that utilize these objects as parameters or return these objects. When reviewing code, it is very common to ask these sorts of questions: \n\n* What is the shape of the `Tensor` I need to pass in?\n* What columns does this `DataFrame` need to have?\n\nIn this talk, we will describe how to utilize typing metadata and Pydantic to not only provide additional context for these data structures, but to validate the input/output of functions as well.\n\nLinks for the talk:  \n\n\\- [Notebook](https://github.com/dschelkoph/ds_validator_talk) used in talk; dev container compatible  \n\n\\- [ds\\_validator](https://pypi.org/project/ds_validator/), the package demonstrated in the talk\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/validating-complex-types-using-pydantic"
  },
  {
    "code": "QPUASH",
    "title": "A Confession of My Python Sins",
    "slug": "a-confession-of-my-python-sins",
    "description": "<p>I've been writing Python code for twenty years now, and in that time I've done some bad things to it.</p>\n<p>Let's discuss them and why you would want to also do black magic, atrocities, abominations, and other sins.</p>",
    "start_time": "2024-07-28T12:30:00-04:00",
    "end_time": "2024-07-28T13:00:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "Jamie Bliss",
        "avatar": "https://pretalx.com/media/avatars/QGEHAQ_BFab68W.jpg",
        "code": "QGEHAQ",
        "slug": "jamie-bliss"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "A Confession of My Python Sins",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "I've been writing Python code for twenty years now, and in that time I've done some bad things to it.\n\nLet's discuss them and why you would want to also do black magic, atrocities, abominations, and other sins.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/a-confession-of-my-python-sins",
    "speaker_names": "Jamie Bliss",
    "description_youtube": "30 Minute Talk by Jamie Bliss at PyOhio 2024:\nI've been writing Python code for twenty years now, and in that time I've done some bad things to it.\n\nLet's discuss them and why you would want to also do black magic, atrocities, abominations, and other sins.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/a-confession-of-my-python-sins"
  },
  {
    "code": "E8JAWJ",
    "title": "Snakes & Ladders: A Gentle Introduction to Generators and Iterators",
    "slug": "snakes-ladders-a-gentle-introduction-to-generators-and-iterators",
    "description": "<p>Generators and Iterators are two core features of Python that are often misunderstood and overlooked.  And yet they are extremely powerful and expressive parts of the language.  They can be especially useful in data processing, systems integration, or in projects with limited resources.  In this talk, we'll get into the fundamentals of what iterators and generators actually are, how they're different from one another, and how they work under the hood.  We will explore how to create your own custom iterators and generators for use in your own projects.  Throughout the discussion, we'll make comparisons to the simple children's game \"Snakes &amp; Ladders,\" and by the end of the talk we should have a simple working example of the game built with iterators and generators.</p>\n<p>NOTE:  Slides and sample code for this talk can be found at <a href=\"https://github.com/jrrickerson/snakes_and_ladders\">https://github.com/jrrickerson/snakes_and_ladders</a></p>",
    "start_time": "2024-07-27T10:15:00-04:00",
    "end_time": "2024-07-27T10:45:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "JR Rickerson",
        "avatar": "https://pretalx.com/media/avatars/AQVCEK_Pg0hfv4.jpeg",
        "code": "AQVCEK",
        "slug": "jr-rickerson"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Snakes & Ladders",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Generators and Iterators are two core features of Python that are often misunderstood and overlooked. And yet they are extremely powerful and expressive parts of the language. They can be especially useful in data processing, systems integration, or in projects with limited resources. In this talk, we'll get into the fundamentals of what iterators and generators actually are, how they're different from one another, and how they work under the hood. We will explore how to create your own custom iterators and generators for use in your own projects. Throughout the discussion, we'll make comparisons to the simple children's game \"Snakes \\& Ladders,\" and by the end of the talk we should have a simple working example of the game built with iterators and generators.\n\nNOTE: Slides and sample code for this talk can be found at https://github.com/jrrickerson/snakes_and_ladders\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/snakes-ladders-a-gentle-introduction-to-generators-and-iterators",
    "speaker_names": "JR Rickerson",
    "description_youtube": "30 Minute Talk by JR Rickerson at PyOhio 2024:\nGenerators and Iterators are two core features of Python that are often misunderstood and overlooked. And yet they are extremely powerful and expressive parts of the language. They can be especially useful in data processing, systems integration, or in projects with limited resources. In this talk, we'll get into the fundamentals of what iterators and generators actually are, how they're different from one another, and how they work under the hood. We will explore how to create your own custom iterators and generators for use in your own projects. Throughout the discussion, we'll make comparisons to the simple children's game \"Snakes \\& Ladders,\" and by the end of the talk we should have a simple working example of the game built with iterators and generators.\n\nNOTE: Slides and sample code for this talk can be found at https://github.com/jrrickerson/snakes_and_ladders\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/snakes-ladders-a-gentle-introduction-to-generators-and-iterators"
  },
  {
    "code": "KSJSPY",
    "title": "Efficient Path Planning for Search and Rescue Missions Using Neural Networks",
    "slug": "efficient-path-planning-for-search-and-rescue-missions-using",
    "description": "<p>Utilizing the Python programming language and the Tkinter library, I propose to develop a simulated robotic application tailored for search and rescue missions. Central to this endeavor is the integration of a neural network, trained on pertinent search and rescue data, to effectively guide the robotic agent towards areas with a high probability of locating survivors. The neural network's computations yield a dynamic cost map, which takes into account both traversal costs and the priority of various regions within the search area. This cost map serves as a comprehensive tool, continuously furnishing the robotic agent with insights into the search region and optimizing its search strategy. Importantly, this approach is conceived to address challenges inherent in reinforcement learning, such as the lack of a global view and the need to balance multiple objectives in search and rescue mission.</p>",
    "start_time": "2024-07-27T11:45:00-04:00",
    "end_time": "2024-07-27T12:15:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Keith Martin Machina",
        "avatar": "https://pretalx.com/media/avatars/M8FBJN_XjNgPdE.jpg",
        "code": "M8FBJN",
        "slug": "keith-martin-machina"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Efficient Path Planning for Search and Rescue Missions Using Neural Networks",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Utilizing the Python programming language and the Tkinter library, I propose to develop a simulated robotic application tailored for search and rescue missions. Central to this endeavor is the integration of a neural network, trained on pertinent search and rescue data, to effectively guide the robotic agent towards areas with a high probability of locating survivors. The neural network's computations yield a dynamic cost map, which takes into account both traversal costs and the priority of various regions within the search area. This cost map serves as a comprehensive tool, continuously furnishing the robotic agent with insights into the search region and optimizing its search strategy. Importantly, this approach is conceived to address challenges inherent in reinforcement learning, such as the lack of a global view and the need to balance multiple objectives in search and rescue mission.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/efficient-path-planning-for-search-and-rescue-missions-using",
    "speaker_names": "Keith Martin Machina",
    "description_youtube": "30 Minute Talk by Keith Martin Machina at PyOhio 2024:\nUtilizing the Python programming language and the Tkinter library, I propose to develop a simulated robotic application tailored for search and rescue missions. Central to this endeavor is the integration of a neural network, trained on pertinent search and rescue data, to effectively guide the robotic agent towards areas with a high probability of locating survivors. The neural network's computations yield a dynamic cost map, which takes into account both traversal costs and the priority of various regions within the search area. This cost map serves as a comprehensive tool, continuously furnishing the robotic agent with insights into the search region and optimizing its search strategy. Importantly, this approach is conceived to address challenges inherent in reinforcement learning, such as the lack of a global view and the need to balance multiple objectives in search and rescue mission.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/efficient-path-planning-for-search-and-rescue-missions-using"
  },
  {
    "code": "8TRXAM",
    "title": "Boosting Neuroimaging Analysis and Results Digestibility 🧠",
    "slug": "boosting-neuroimaging-analysis-and-results-digestibility",
    "description": "<p>Electroencephalogram (EEG) measures brain activity, and despite advancements in sensors since its 1924 invention, its result presentation has changed very little. We're addressing this using MNE, an open-source Python library.</p>\n<p>Join us to simplify neuroimaging results for patients and enhance visualization tools for technicians. Affordable biotracking devices now capture brain wave data, and MNE enables innovative data export and manipulation. This opens new possibilities for advanced statistics, improved visualizations, and enhanced analysis capabilities.</p>\n<p>No medical background is required – join us in revolutionizing brain activity interpretation, making it more accessible and meaningful for everyone.</p>",
    "start_time": "2024-07-27T14:15:00-04:00",
    "end_time": "2024-07-27T14:45:00-04:00",
    "room": "Calypso",
    "duration": 30,
    "speakers": [
      {
        "name": "Carlos A Aranibar",
        "avatar": "https://pretalx.com/media/avatars/MGPBMB_zNp5JTs.jpg",
        "code": "MGPBMB",
        "slug": "carlos-a-aranibar"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Boosting Neuroimaging Analysis and Results Digestibility 🧠",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Electroencephalogram (EEG) measures brain activity, and despite advancements in sensors since its 1924 invention, its result presentation has changed very little. We're addressing this using MNE, an open\\-source Python library.\n\nJoin us to simplify neuroimaging results for patients and enhance visualization tools for technicians. Affordable biotracking devices now capture brain wave data, and MNE enables innovative data export and manipulation. This opens new possibilities for advanced statistics, improved visualizations, and enhanced analysis capabilities.\n\nNo medical background is required – join us in revolutionizing brain activity interpretation, making it more accessible and meaningful for everyone.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/boosting-neuroimaging-analysis-and-results-digestibility",
    "speaker_names": "Carlos A Aranibar",
    "description_youtube": "30 Minute Talk by Carlos A Aranibar at PyOhio 2024:\nElectroencephalogram (EEG) measures brain activity, and despite advancements in sensors since its 1924 invention, its result presentation has changed very little. We're addressing this using MNE, an open\\-source Python library.\n\nJoin us to simplify neuroimaging results for patients and enhance visualization tools for technicians. Affordable biotracking devices now capture brain wave data, and MNE enables innovative data export and manipulation. This opens new possibilities for advanced statistics, improved visualizations, and enhanced analysis capabilities.\n\nNo medical background is required – join us in revolutionizing brain activity interpretation, making it more accessible and meaningful for everyone.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/boosting-neuroimaging-analysis-and-results-digestibility"
  },
  {
    "code": "NC9JDX",
    "title": "Python + Discord = Great Bots!",
    "slug": "python-discord-great-bots",
    "description": "<p>Okay you already enjoy using python, and you already enjoy using Discord, but what if you combined both! </p>\n<p>In this talk we will explore how to build a discord bot using the Pycord library. We’ll build a dice rolling bot that utilizes Discord’s native slash commands. At the end of this talk you’ll have learned the different ways to invoke discord bot actions, the different lifecycle events each bot goes through, structuring the code for maintainability, and how to build for widespread adoption.</p>",
    "start_time": "2024-07-28T14:45:00-04:00",
    "end_time": "2024-07-28T15:15:00-04:00",
    "room": "Orchid Ballroom West",
    "duration": 30,
    "speakers": [
      {
        "name": "Alex Oladele",
        "avatar": "https://pretalx.com/media/avatars/SZA7TK_8iMnOYD.jpeg",
        "code": "SZA7TK",
        "slug": "alex-oladele"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Python + Discord = Great Bots!",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Okay you already enjoy using python, and you already enjoy using Discord, but what if you combined both! \n\nIn this talk we will explore how to build a discord bot using the Pycord library. We’ll build a dice rolling bot that utilizes Discord’s native slash commands. At the end of this talk you’ll have learned the different ways to invoke discord bot actions, the different lifecycle events each bot goes through, structuring the code for maintainability, and how to build for widespread adoption.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/python-discord-great-bots",
    "speaker_names": "Alex Oladele",
    "description_youtube": "30 Minute Talk by Alex Oladele at PyOhio 2024:\nOkay you already enjoy using python, and you already enjoy using Discord, but what if you combined both! \n\nIn this talk we will explore how to build a discord bot using the Pycord library. We’ll build a dice rolling bot that utilizes Discord’s native slash commands. At the end of this talk you’ll have learned the different ways to invoke discord bot actions, the different lifecycle events each bot goes through, structuring the code for maintainability, and how to build for widespread adoption.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/python-discord-great-bots"
  },
  {
    "code": "FJ97TP",
    "title": "Serverless AI Inferencing Using Python and WebAssembly",
    "slug": "serverless-ai-inferencing-using-python-and-webassembly",
    "description": "<p>Unleashing the power of serverless AI has never been more accessible, and Python enthusiasts are in for a treat! Dive into this talk to discover how WebAssembly based Open Source project Spin seamlessly bridges the gap between Python and Serverless AI. There are no models to download. Just create, build and deploy! This talk will guide you on building your own serverless AI inferencing using Python and promises to elevate your game instantly.</p>",
    "start_time": "2024-07-27T10:15:00-04:00",
    "end_time": "2024-07-27T10:45:00-04:00",
    "room": "Orchid Ballroom East",
    "duration": 30,
    "speakers": [
      {
        "name": "Shivay Lamba",
        "avatar": "https://pretalx.com/media/avatars/T9TYF8_b5iNhGh.jpg",
        "code": "T9TYF8",
        "slug": "shivay-lamba"
      }
    ],
    "type": "30 Minute Talk",
    "qna": true,
    "qna_channel": "Serverless AI Inferencing Using Python and WebAssembly",
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Unleashing the power of serverless AI has never been more accessible, and Python enthusiasts are in for a treat! Dive into this talk to discover how WebAssembly based Open Source project Spin seamlessly bridges the gap between Python and Serverless AI. There are no models to download. Just create, build and deploy! This talk will guide you on building your own serverless AI inferencing using Python and promises to elevate your game instantly.\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/serverless-ai-inferencing-using-python-and-webassembly",
    "speaker_names": "Shivay Lamba",
    "description_youtube": "30 Minute Talk by Shivay Lamba at PyOhio 2024:\nUnleashing the power of serverless AI has never been more accessible, and Python enthusiasts are in for a treat! Dive into this talk to discover how WebAssembly based Open Source project Spin seamlessly bridges the gap between Python and Serverless AI. There are no models to download. Just create, build and deploy! This talk will guide you on building your own serverless AI inferencing using Python and promises to elevate your game instantly.\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/serverless-ai-inferencing-using-python-and-webassembly"
  },
  {
    "code": "VPKXVW",
    "title": "Saturday Welcome",
    "slug": "saturday-welcome",
    "description": "<p>Opening Remarks Saturday</p>",
    "start_time": "2024-07-27T09:00:00-04:00",
    "end_time": "2024-07-27T09:15:00-04:00",
    "room": "Orchid Ballroom",
    "duration": 15,
    "speakers": [],
    "type": "Plenary Session",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Opening Remarks Saturday\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/saturday-welcome",
    "speaker_names": "",
    "description_youtube": "Plenary Session by  at PyOhio 2024:\nOpening Remarks Saturday\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/saturday-welcome"
  },
  {
    "code": "UGTCE7",
    "title": "Closing Remarks",
    "slug": "closing-remarks",
    "description": "<p>Closing Remarks</p>",
    "start_time": "2024-07-28T16:15:00-04:00",
    "end_time": "2024-07-28T16:30:00-04:00",
    "room": "Orchid Ballroom",
    "duration": 15,
    "speakers": [],
    "type": "Plenary Session",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Closing Remarks\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/closing-remarks",
    "speaker_names": "",
    "description_youtube": "Plenary Session by  at PyOhio 2024:\nClosing Remarks\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/closing-remarks"
  },
  {
    "code": "KNVA99",
    "title": "Sunday Welcome",
    "slug": "sunday-welcome",
    "description": "<p>Re-Opening Remarks</p>",
    "start_time": "2024-07-28T12:00:00-04:00",
    "end_time": "2024-07-28T12:15:00-04:00",
    "room": "Orchid Ballroom",
    "duration": 15,
    "speakers": [],
    "type": "Plenary Session",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Re\\-Opening Remarks\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/sunday-welcome",
    "speaker_names": "",
    "description_youtube": "Plenary Session by  at PyOhio 2024:\nRe\\-Opening Remarks\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/sunday-welcome"
  },
  {
    "code": "79JCGZ",
    "title": "Lightning Talks",
    "slug": "lightning-talks",
    "description": "<p>Lightning Talks</p>",
    "start_time": "2024-07-27T16:30:00-04:00",
    "end_time": "2024-07-27T18:00:00-04:00",
    "room": "Orchid Ballroom",
    "duration": 90,
    "speakers": [],
    "type": "Plenary Session",
    "qna": false,
    "qna_channel": null,
    "youtube_url": null,
    "content_warnings": null,
    "discord_channel_id": "",
    "stream_timestamp": "",
    "description_text": "Lightning Talks\n\n",
    "talk_url": "https://www.pyohio.org/2024/talks/lightning-talks",
    "speaker_names": "",
    "description_youtube": "Plenary Session by  at PyOhio 2024:\nLightning Talks\n\nPyOhio talk listing: https://www.pyohio.org/2024/talks/lightning-talks"
  }
]