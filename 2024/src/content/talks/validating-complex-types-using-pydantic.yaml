code: EWVQHG
content_warnings: null
description: '<p>For some Python Objects it is difficult to understand its contents,
  even if type annotations are used.  For example, PyTorch''s <code>Tensor</code>
  or Pandas''s <code>DataFrame</code> have many different "shapes" to their data structures,
  but their type annotations are always the same.  This can make it very difficult
  to understand functions that utilize these objects as parameters or return these
  objects.  When reviewing code, it is very common to ask these sorts of questions:
  </p>

  <ul>

  <li>What is the shape of the <code>Tensor</code> I need to pass in?</li>

  <li>What columns does this <code>DataFrame</code> need to have? </li>

  </ul>

  <p>In this talk, we will describe how to utilize typing metadata and Pydantic to
  not only provide additional context for these data structures, but to validate the
  input/output of functions as well.</p>'
discord_channel_id: ''
duration: 30
end_time: TBD
qna: true
qna_channel: Validating Complex Types Using Pydantic
slug: validating-complex-types-using-pydantic
speakers:
- avatar: https://pretalx.com/media/avatars/IMG_0066_tLqbLpT.jpeg
  code: NL3RWX
  name: Daniel Schelkoph
  slug: daniel-schelkoph
start_time: TBD
stream_timestamp: ''
title: Validating Complex Types Using Pydantic
type: 30 Minute Talk
youtube_url: null
