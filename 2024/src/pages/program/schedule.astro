---
import DefaultLayout from '../../layouts/DefaultLayout.astro'
import { getCollection } from 'astro:content'
import { DateTime } from 'luxon'

const roomOrder = ["Orchid Ballroom", "Orchid Ballroom West", "Orchid Ballroom East", "Calypso", "Cattelya"]
const talks = (await getCollection("talks")).sort(
  (a, b) => Date.parse(a.data.start_time) - Date.parse(b.data.start_time) || roomOrder.indexOf(a.data.room) - roomOrder.indexOf(b.data.room)
);

const talkDataByDate = talks.reduce((acc, talk) => {
  const date = DateTime.fromISO(talk.data.start_time).toISODate()
  if (!acc[date]) {
    acc[date] = []
  }
  acc[date].push(talk)
  return acc
}, {})

const talkDataByDateAndTime = Object.keys(talkDataByDate).reduce((acc, date) => {
  acc[date] = talkDataByDate[date].reduce((acc, talk) => {
    const time = DateTime.fromISO(talk.data.start_time)
    if (!acc[time]) {
      acc[time] = []
    }
    acc[time].push(talk)
    return acc
  }, {})
  return acc
}, {})

function formatTime(timeString) {
  const talkTime = DateTime.fromISO(timeString)
  if (isNaN(talkTime)) {
    return 'TBD'
  } else {
    return talkTime.setZone('America/New_York').toFormat('h:mm a').toLowerCase()
  }
}
---

<DefaultLayout title="Schedule">
  <section class="my-6">
    <div class="container">
      <h1>Schedule</h1>
    </div>
  </section>


{( Object.keys(talkDataByDateAndTime).map((scheduleDate) => (
  <section class="container">
      <h2 class="my-6">{DateTime.fromISO(scheduleDate).toFormat('cccc, LLLL d')}</h2>
      <div class="">
      <table class="table-auto text-sm">
        <thead class="text-center border heading">
          <th class="w-32 p-2 border time">Start Time</th>
          <th class="p-x2 border" colspan="4">Room</th>
        </thead>
        <thead class="text-center border sticky-heading">
          <th class="w-32 p-2 border"></th>
          <th class="p-2 border talk">Orchid Ballroom West</th>
          <th class="p-2 border talk">Orchid Ballroom East</th>
          <th class="p-2 border talk">Calypso</th>
          <th class="p-2 border talk">Cattelya</th>
        </thead>

      {Object.keys(talkDataByDateAndTime[scheduleDate]).map((scheduleTime) => (
        <tr class="border">
          <td class="text-center border time"><p>{formatTime(scheduleTime)}</p></td>
            {talkDataByDateAndTime[scheduleDate][scheduleTime].map((talk) => (
              () => {
                if (["Keynote", "Plenary Session"].includes(talk.data.type)) {
                  return <td class="border p-2" colspan="2">
                    <p class="">{talk.data.title}</p>
                  </td><td></td>
                } else if (talk.data.type === "Break") {
                  if (talk.data.title === "Lunch Break"){
                    return <td class="border px-2" colspan="4">
                    <p class="">{talk.data.title}</p>
                  </td>
                  } else {
                    return <td class="border p-2" colspan="4">
                    <p class="">{talk.data.title}</p>
                  </td>
                  }

                } else {
              return <td class="border text-left align-top p-2">
                <p class="font-bold">
                  <a href={"/2024/program/talks/" + talk.data.slug}>{talk.data.title}</a>
                </p>
                <p class="text-xs">
                                by {talk.data.speakers.map((speaker) => speaker.name).join(', ')}
                                </p>
              </td>
                }
            }
          ))}
        </tr>
      ))}
      </table></div>
  </section>
)))}



<style lang="scss" is:global>
  @use '../../assets/scss/base/color' as *;
  .sticky-heading {
    position: sticky;
    top: 0;
    background-color:  var(--neutral-background);
    z-index: 3;
  }
  .heading {
    background-color: var(--neutral-background);
  }
  .time {
    background-color: var(--neutral-background);
    position: sticky;
  left: 0;
  z-index: 2;
  }
  .talk {
    min-width: 14em;
  }
</style>